<?xml version="1.0" encoding="UTF-8"?>
<wdkModel>

  <querySet name="VariantAttributes" queryType="attribute" isCacheable="false">

    <!-- =================================================================== -->
    <!-- Alias -->
    <!-- allow search by refsnp, but only return first hit -->
    <!-- =================================================================== -->
    <sqlQuery name="VariantAlias" doNotTest="true">
      <column name="source_id" columnType="string"/>
      <column name="project_id" columnType="string"/>
      <column name="old_source_id" columnType="string"/>
      <sql>
	<![CDATA[
			WITH ids AS (##WDK_ID_SQL##)
			SELECT find_variant_primary_key(ids.old_source_id) AS source_id,
			ids.old_source_id AS old_source_id,
			'@PROJECT_ID@'::text AS project_id
			FROM ids
		]]>
      </sql>
    </sqlQuery>


    <!-- =============================================================== -->
    <!-- Basic Attributes -->
    <!-- =============================================================== -->

    <sqlQuery name="SortingAttributes">
      <column name="project_id" columnType="string"/>
      <column name="source_id" columnType="string"/>
      <column name="display_id" columnType="string"/>
      <sql>
	<![CDATA[
		 SELECT '@PROJECT_ID@'::text AS project_id, 
		 ids.source_id AS source_id,
		 v.details->>'display_id' AS display_id
		 FROM (##WDK_ID_SQL##) ids, get_variant_display_details(ids.source_id) v	
	]]>	
      </sql>
    </sqlQuery>

    <sqlQuery name="BasicAttributes">
      <column name="project_id" columnType="string"/>
      <column name="source_id" columnType="string"/>
      <column name="ref_snp_id" columnType="string"/>
      <column name="metaseq_id" columnType="string"/>

      <column name="chromosome" columnType="string"/>
      <column name="position" columnType="number"/>
      <column name="location" columnType="string"/>
	  <column name="span" columnType="string"/>

      <column name="display_allele" columnType="string"/>
      
      <column name="variant_class_abbrev" columnType="string"/>
      <column name="variant_class" columnType="string"/>

      <column name="adsp_display_flag" columnType="string"/>

      <column name="is_adsp_variant" columnType="boolean"/>

      <column name="adsp_qc_status" columnType="string"/>
      <column name="adsp_qc_flags" columnType="string"/>
      

      <sql>
	<![CDATA[
		 SELECT '@PROJECT_ID@'::TEXT AS project_id,
		 record_primary_key AS source_id,
		 v.details->>'ref_snp_id' AS ref_snp_id,
		 v.details->>'metaseq_id' AS metaseq_id,
		 v.details->>'display_id' AS display_id,
		 v.details->>'display_allele' AS display_allele,
		 v.details->>'variant_class' AS variant_class,
		 v.details->>'variant_class_abbrev' AS variant_class_abbrev,
		 v.details->>'chromosome' AS chromosome,
		 (v.details->>'position')::int AS position,

		 v.details->>'location' AS location,
		 v.details->>'chromosome' || ':' || (v.details->>'location')::text AS span,
		 
		 (v.details->>'is_adsp_variant')::boolean AS is_adsp_variant,
		 adsp_variant_flag((v.details->>'is_adsp_variant')::boolean) AS adsp_display_flag,
		 
		 adsp_qc_status(ids.source_id) AS adsp_qc_status,
		 adsp_qc_call(ids.source_id) AS adsp_qc_flags
		 
		 FROM (##WDK_ID_SQL##) ids, get_variant_display_details(ids.source_id) v	
	]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="MostSevereConsequence">
      <column name="project_id" columnType="string"/>
      <column name="source_id" columnType="string"/>
      <column name="most_severe_consequence" columnType="string"/>
      <column name="msc_impacted_gene" columnType="string"/>
      <column name="msc_impacted_gene_symbol" columnType="string"/>
      <column name="msc_impacted_gene_link" columnType="string"/>
      <column name="msc_impact" columnType="string"/>
      <column name="msc_is_coding" columnType="string"/>
      <column name="msc_amino_acid_change" columnType="string"/>
      <column name="msc_codon_change" columnType="string"/>
      <column name="msc_impacted_transcript" columnType="string"/>
      <sql>
	<![CDATA[
		 WITH id AS (##WDK_ID_SQL##),

		 msc AS (
		 SELECT id.source_id, most_severe_consequence(id.source_id), most_severe_consequence(source_id, TRUE)::jsonb AS conseq FROM id)

		 SELECT msc.source_id,
		 'GRCh38'::text AS project_id,
		 msc.most_severe_consequence AS most_severe_consequence,
		 msc.conseq->>'gene_id' AS msc_impacted_gene,
		 msc.conseq->>'gene_symbol' AS msc_impacted_gene_symbol,
		 build_link_attribute(msc.conseq->>'gene_symbol', '/record/gene/', msc.conseq->>'gene_id', 'view gene annotations')::text AS msc_impacted_gene_link,
		 msc.conseq->>'impact' AS msc_impact,

		 CASE WHEN (msc.conseq->>'consequence_is_coding')::boolean THEN 
		 build_icon_attribute('Coding', 'fa-check', 'green', NULL, 'true') ELSE NULL END AS msc_is_coding,

		 msc.conseq->>'transcript_id' AS msc_impacted_transcript,  
           
		 msc.conseq->>'codons' AS msc_codon_change,
		 msc.conseq->>'amino_acids' AS msc_amino_acid_change		 
		 FROM msc
	]]>
      </sql>
    </sqlQuery>
  
    <sqlQuery name="GWSDatasetsPlot">
      <column name="source_id" columnType="string"/>
      <column name="gws_datasets_summary_plot" columnType="string"/>
      <sql>
	  <![CDATA[
		   WITH id AS (##WDK_ID_SQL##),

		   phenotype AS (
		   SELECT t.protocol_app_node_id,
		   c.characteristic_type AS category,

		   CASE WHEN c.characteristic_type = 'diagnosis' OR c.characteristic_type = 'neuropathology' THEN
			CASE WHEN c.characteristic ILIKE '%Alz%' THEN 'AD/LOAD'
				WHEN c.characteristic ILIKE 'Progressive%' THEN 'PSP'
				WHEN c.characteristic ILIKE 'Frontotemporal%' THEN 'FTD'
						WHEN c.characteristic ILIKE 'Lewy%' THEN 'Lewy Body Dementia'
						WHEN c.characteristic = 'dementia' THEN 'Dementia'
						WHEN c.characteristic = 'cognitive impairment' THEN 'Cognitive Impairment' 
						ELSE 'Other Neuropathology'
				END		 
			ELSE -- biomarkers
			c.characteristic
		 END AS phenotype

		   FROM  NIAGADS.TrackAttributes t,
		   NIAGADS.ProtocolAppNodeCharacteristic c
		   WHERE t.subcategory = 'GWAS summary statistics'
		   AND t.dataset_accession NOT LIKE '%CATALOG%'
		   AND c.protocol_app_node_id = t.protocol_app_node_id
		   AND c.characteristic_type IN ('diagnosis', 'neuropathology', 'biomarker')
		   AND c.characteristic NOT IN ('autopsy-based diagnosis')
		   AND c.characteristic NOT IN ('memory performance', 'linguistic error measurement', 'visuospatial impairment')
		   ),

		   hits AS (		  
		   SELECT DISTINCT id.source_id,
		   r.protocol_app_node_id,
		   CASE WHEN r.neg_log10_pvalue < -1 * log(5e-8) THEN FALSE ELSE TRUE END AS has_gws,
		   p.phenotype,
		   CASE WHEN p.category = 'biomarker' THEN 'biomarker' ELSE 'diagnosis' END AS category,
		   ROW_NUMBER() OVER(ORDER BY category, phenotype) AS sort_order
		   FROM Results.VariantGWAS r, id, phenotype p
		   WHERE r.variant_record_primary_key = id.source_id
		   AND r.neg_log10_pvalue >= 3.0
		   AND p.protocol_app_node_id = r.protocol_app_node_id
		   ORDER BY category, p.phenotype
		   ),
		   
		   ycategories AS (
		   SELECT DISTINCT source_id, category, phenotype,
		   MIN(sort_order) AS sort_order,
		   ROW_NUMBER() OVER(ORDER BY MIN(sort_order)) - 1 AS y_index
		   FROM hits
		   GROUP BY source_id, category, phenotype
		   ),
		   
		   ycategories_json AS (
		   SELECT source_id, category,
		   jsonb_agg(phenotype ORDER BY y_index) AS json
		   FROM ycategories
		   GROUP BY source_id, category
		   ),
		   
		   gws_counts AS (
		   SELECT source_id, category, phenotype,
		   SUM (CASE WHEN has_gws THEN 1 ELSE 0 END) AS gws_count,
		   SUM (CASE WHEN has_gws THEN 0 ELSE 1 END) AS not_gws_count
		   FROM hits
		   GROUP BY source_id, category, phenotype
		   ),	
		   
		   series AS (
		   SELECT gc.source_id, gc.category,
		   jsonb_build_object('name', 'p < 5e-8', 'data', jsonb_agg(gc.gws_count ORDER BY c.y_index)) AS series_data
		   FROM gws_counts gc, ycategories c
		   WHERE gc.source_id = c.source_id
		   AND gc.phenotype = c.phenotype
		   AND gc.category = c.category
		   GROUP BY gc.source_id, gc.category

		   UNION ALL
		   
		   SELECT gc.source_id, gc.category,
		   jsonb_build_object('name', '5e-8 < p < 1e-3', 'data', jsonb_agg(gc.not_gws_count ORDER BY c.y_index)) AS series_data
		   FROM gws_counts gc, ycategories c
		   WHERE gc.source_id = c.source_id
		   AND gc.phenotype = c.phenotype
		   AND gc.category = c.category
		   GROUP BY gc.source_id, gc.category
		   ),

	    	   diagnosis AS (
		   SELECT s.source_id,
		   jsonb_build_object(
		   'title', 'Diagnosis',
		   'categories', yc.json,
		   'series', jsonb_agg(series_data)) AS chart_data
		   FROM series s, ycategories_json yc
		   WHERE s.source_id = yc.source_id
		   AND s.category = 'diagnosis'
		   AND s.category = yc.category		   
		   GROUP BY s.source_id, yc.json
		   ),
		   
		   neuropathology AS (
		   SELECT s.source_id,
		   jsonb_build_object(
		   'title', 'Neuropathology',
		   'categories', yc.json,
		   'series', jsonb_agg(series_data)) AS chart_data
		   FROM series s, ycategories_json yc
		   WHERE s.source_id = yc.source_id
		   AND s.category = 'neuropathology'
		   AND s.category = yc.category
		   GROUP BY s.source_id, yc.json
		   ),

		   biomarker AS (
		   SELECT s.source_id,
		   jsonb_build_object(
		   'title', 'Biomarker',
		   'categories', yc.json,
		   'series', jsonb_agg(series_data)) AS chart_data		   
		   FROM series s, ycategories_json yc
		   WHERE s.source_id = yc.source_id
		   AND s.category = 'biomarker'
		   AND s.category = yc.category
		   GROUP BY s.source_id, yc.json
		   )
		   
		   SELECT id.source_id,
		   jsonb_build_array_check_nulls((SELECT chart_data FROM diagnosis), 
		   (SELECT chart_data FROM neuropathology),
		   (SELECT chart_data FROM biomarker))::text AS gws_datasets_summary_plot
		   FROM id       
	  ]]>
	  </sql>
	</sqlQuery>

  
    <!-- =============================================================== -->
    <!-- Genomic Location -->
    <!-- =============================================================== -->

    <sqlQuery name="ColocatedVariants">
      <column name="project_id" columnType="string"/>
      <column name="source_id" columnType="string"/>
      <column name="num_colocated_variants" columnType="number"/>
      <column name="colocated_variants" columnType="string"/>
      <column name="is_multi_allelic" columnType="boolean"/>
      <column name="alternative_variants" columnType="string"/>
      <sql>
	<![CDATA[
		 WITH id AS ( ##WDK_ID_SQL## ),

		 bi AS (
			SELECT id.source_id AS record_primary_key, 
			v.bin_index, 
			(v.display_attributes->>'location_start')::int AS location_start,
			(v.display_attributes->>'location_end')::int AS location_end,
			v.position AS location,
			v.chromosome,
			v.ref_snp_id,
			split_part(record_primary_key, ':', 3) AS ref_allele
			FROM AnnotatedVDB.Variant v, id 
			WHERE record_primary_key = id.source_id),
   
			cv AS (
			SELECT v.record_primary_key, v.ref_snp_id, 
			v.metaseq_id, v.position AS location,
			split_part(v.record_primary_key, ':', 3) AS ref_allele
			FROM AnnotatedVDB.Variant v
			WHERE v.bin_index @> (SELECT bin_index FROM bi)
			AND int8range((SELECT bi.location_start FROM bi), (SELECT bi.location_end FROM bi), '[]') 
			&& int8range((v.display_attributes->>'location_start')::int, (v.display_attributes->>'location_end')::int, '[]')
			AND v.record_primary_key NOT IN (SELECT record_primary_key FROM bi)	 
			) ,
   
			result AS (
			SELECT bi.record_primary_key AS source_id, cv.record_primary_key, cv.ref_snp_id,
			CASE WHEN bi.ref_snp_id = cv.ref_snp_id 
			OR (cv.location = bi.location AND cv.ref_allele = bi.ref_allele)
			THEN TRUE ELSE FALSE END AS is_alt_allele,
			 build_link_attribute(truncate_str(cv.metaseq_id, 27) || COALESCE(' (' || cv.ref_snp_id || ')', ''), 
			'/record/variant/', cv.record_primary_key, truncate_str(metaseq_id, 100)) AS variant_link
			FROM cv, bi)
			
			SELECT id.source_id,
			'@PROJECT_ID@'::text AS project_id,
			jsonb_agg(variant_link ORDER BY ref_snp_id) FILTER (WHERE is_alt_allele) AS alternative_variants,
			jsonb_agg(variant_link ORDER BY ref_snp_id) FILTER (WHERE NOT is_alt_allele) AS colocated_variants,
			SUM(is_alt_allele::integer) > 0 AS is_multi_allelic,
			SUM((NOT is_alt_allele)::integer) AS num_colocated_variants
			FROM id LEFT OUTER JOIN result r ON id.source_id = r.source_id	
			GROUP BY id.source_id
	]]>
      </sql>
    </sqlQuery>
      

    <!-- =============================================================== -->
    <!-- Function analysis -->
    <!-- =============================================================== -->

    <sqlQuery name="CADD">
      <column name="project_id" columnType="string"/>
      <column name="source_id" columnType="string"/>
      <column name="cadd_phred_score" columnType="float"/>
      <column name="cadd_raw_score" columnType="float"/>

      <sql>
	<![CDATA[
		 WITH id AS (##WDK_ID_SQL##)
		 SELECT id.source_id,
		 '@PROJECT_ID@'::text AS project_id,
		 (cadd_scores->>'CADD_phred')::numeric AS cadd_phred_score,
		 (cadd_scores->>'CADD_raw_score')::numeric AS cadd_raw_score
		 FROM AnnotatedVDB.Variant v, id 
		 WHERE id.source_id = v.record_primary_key
	]]>
      </sql>
    </sqlQuery>

  </querySet>
</wdkModel>
