<?xml version="1.0" encoding="UTF-8"?>
<wdkModel>
  <querySet name="VariantTables" 
	    queryType="table" 
	    isCacheable="false">

    <!-- =============================================================== -->
    <!-- Genetic Variation -->
    <!-- =============================================================== -->
    <sqlQuery name="LocusZoomGwasDatasets">
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="dataset_list"/>
      <sql>
	<![CDATA[
		 WITH id AS (##WDK_ID_SQL##),

		 datasets AS (
		 SELECT DISTINCT id.source_id, pan.source_id AS dataset_source_id,
		 jsonb_build_object(pan.source_id, split_part(pan.source_id, '_', 1) || ': ' || pan.name) AS dataset_json
		 FROM Study.ProtocolAppNode pan,
		 Results.VariantGWAS r, id
		 WHERE r.variant_record_primary_key = id.source_id
		 AND pan.protocol_app_node_id = r.protocol_app_node_id
		 AND r.neg_log10_pvalue > 3)

		 SELECT id.source_id,
		 NULLIF(jsonb_agg(dataset_json ORDER BY dataset_source_id)::text, '[null]') AS dataset_list
		 FROM datasets RIGHT OUTER JOIN id ON id.source_id = datasets.source_id
		 GROUP BY id.source_id
	]]>
      </sql>
    </sqlQuery>
    

    <sqlQuery name="Linkage">
      <column name="source_id"/>
      <column name="variant"/>
      <column name="linked_ref_snp_id"/>
      <column name="adsp_variant_flag"/>
      <column name="distance"/>
      <column name="r_squared"/>
      <column name="d_prime"/>
      <column name="population"/>
      <column name="minor_allele_frequency"/>
      <column name="minor_allele_frequency_ld_ref"/>

      <sql>
	<![CDATA[
		 WITH id AS (##WDK_ID_SQL##),

	variant AS (SELECT * FROM id, get_variant_display_details(id.source_id) v),

linkage AS (
SELECT v.details->>'chromosome' AS chromosome, 
(v.details->>'position')::int AS position, 
v.details->>'ref_snp_id' AS ref_snp_id,
vl.* 
FROM variant v, get_variant_linkage(v.record_primary_key) vl),

ExpandedLinkage AS (
SELECT record_primary_key, 
chromosome,
(r.linkage->>'population_id')::int AS population_id,
build_text_attribute(p.abbreviation, p.display_value, NULL)::text AS population,
(r.linkage->>'d_prime')::numeric AS d_prime,
(r.linkage->>'r_squared')::numeric AS r_squared,
(r.linkage->>'distance')::int AS distance,

CASE WHEN r.position = ((r.linkage->'locations')[0])::int 
THEN ((r.linkage->'locations')[1])::int ELSE ((r.linkage->'locations')[0])::int
END AS linked_position,

CASE WHEN r.position = ((r.linkage->'locations')[0])::int 
THEN ((r.linkage->'minor_allele_frequency')[0])::numeric ELSE ((r.linkage->'minor_allele_frequency')[1])::numeric
END AS minor_allele_frequency_ld_ref,

CASE WHEN r.position = ((r.linkage->'locations')[0])::int 
THEN ((r.linkage->'minor_allele_frequency')[1])::numeric ELSE ((r.linkage->'minor_allele_frequency')[0])::numeric
END AS minor_allele_frequency,

CASE WHEN r.position = ((r.linkage->'locations')[0])::int 
THEN (r.linkage->'variants')[1] ELSE (r.linkage->'variants')[0] 
END AS linked_variant

FROM linkage r, NIAGADS.Population p, NIAGADS.ProtocolAppNodeCharacteristic pc
WHERE (r.linkage->>'population_id')::int = pc.protocol_app_node_id
AND pc.characteristic_type = 'population'
AND (p.source_id = pc.characteristic OR p.ontology_term_id = pc.ontology_term_id)
AND p.datasource IN ('ADSP', '1000Genomes')),

MappedLinkage AS (
SELECT r.* , 
CASE WHEN r.linked_variant IS NULL 
THEN position_pk.record_primary_key
ELSE r.linked_variant::text END AS linked_variant_record_primary_key
FROM ExpandedLinkage r, 
get_variant_pk_by_position(replace(r.chromosome::text, 'chr', '') || ':' || r.linked_position::text, false) position_pk)

SELECT m.record_primary_key AS source_id,
m.population,
m.d_prime,
m.distance,
m.r_squared,

CASE WHEN m.minor_allele_frequency_ld_ref < 0.001 AND m.minor_allele_frequency_ld_ref > 0 
THEN to_char(m.minor_allele_frequency_ld_ref, '9.9EEEE')
WHEN m.minor_allele_frequency_ld_ref = 0 THEN 0::text
ELSE round(m.minor_allele_frequency_ld_ref::numeric, 3)::text 
END AS minor_allele_frequency_ld_ref,
		 
CASE WHEN m.minor_allele_frequency < 0.001 AND m.minor_allele_frequency > 0 
THEN to_char(m.minor_allele_frequency, '9.9EEEE')
WHEN m.minor_allele_frequency = 0 THEN 0::text
ELSE round(m.minor_allele_frequency::numeric, 3)::text 
END AS minor_allele_frequency,                                  

v.details->>'metaseq_id' AS linked_metaseq_id,
v.details->>'ref_snp_id' AS linked_ref_snp_id,

record_link('variant', m.linked_variant_record_primary_key, 
truncate_str(v.details->>'metaseq_id', 30), true) AS variant,

(v.details->>'is_adsp_variant')::boolean AS is_adsp_variant,
adsp_variant_flag((v.details->>'is_adsp_variant')::boolean) AS adsp_variant_flag
FROM MappedLinkage m,
get_variant_display_details(m.linked_variant_record_primary_key) v
	]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="AlleleFrequency">
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="population"/>
      <column name="population_abbrev"/>
      <column name="population_source"/>
      <column name="frequency"/>
      <column name="percent_frequency"/>

      <sql>
	<![CDATA[	
		 WITH id AS (##WDK_ID_SQL##),

		 freq AS (SELECT record_primary_key AS source_id, allele_frequencies 
		 FROM AnnotatedVDB.Variant WHERE record_primary_key IN (SELECT source_id FROM id)),

		 freq_elements AS (
		 SELECT source_id, key AS datasource, 
		 value AS freq_json 
		 FROM freq, jsonb_each(allele_frequencies)) ,

		 freq_values AS (
		 SELECT source_id,
		 datasource, 
		 key AS population_source_id, 
		 value::numeric AS frequency 
		 FROM freq_elements, jsonb_each(freq_json))
		 

		 SELECT v.source_id,
		 p.datasource AS population_source, -- TODO: add version
		 CASE WHEN frequency < 0.001 AND frequency > 0 THEN to_char(frequency, '9.9EEEE')
		 WHEN frequency = 0 THEN 0::text
		 ELSE round(frequency::numeric, 3)::text END AS frequency,
		 n.alt AS allele,
		 abbreviation AS population_abbrev, 

		 CASE WHEN description IS NOT NULL THEN build_text_attribute(display_value, description, NULL)
		 ELSE build_text_attribute(display_value, NULL, NULL) END AS population

		 FROM freq_values v, NIAGADS.Population p,
		 normalize_alleles(split_part(v.source_id, ':', 3), split_part(split_part(v.source_id, '_', 1), ':', 4)) n
		 WHERE p.datasource = v.datasource 
		 AND p.source_id = v.population_source_id
		 ORDER BY population_source, description NULLS FIRST, population_abbrev
	]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="ADAssociationsFromGWAS">
      <column name="source_id"/>
      <column name="allele"/>
      <column name="track_name_link"/>
      <column name="pvalue"/>

      <sql>
	<![CDATA[
		 WITH id AS (##WDK_ID_SQL##),

		 tracks AS (
		 SELECT DISTINCT ta.track, ta.protocol_app_node_id,
		 build_link_attribute(ta.name, '/record/track/', ta.track, ta.description) AS track_name_link
		 FROM NIAGADS.TrackAttributes ta,
		 NIAGADS.ProtocolAppNodeCharacteristic c
		 WHERE ta.protocol_app_node_id = c.protocol_app_node_id
		 AND ta.subcategory = 'GWAS summary statistics'
		 AND ta.dataset_accession NOT LIKE '%CATALOG%'
		 AND c.characteristic_type = 'diagnosis'
		 AND c.characteristic LIKE '%Alzh%')
		 
		 SELECT id.source_id, t.*, r.test_allele AS allele, to_char(r.pvalue_display::numeric, '9.99EEEE') as pvalue
		 FROM id, NIAGADS.VariantGWASTopHits r, tracks t
		 WHERE t.protocol_app_node_id = r.protocol_app_node_id
		 AND id.source_id = r.variant_record_primary_key
		 AND r.neg_log10_pvalue > 3
		 AND r.neg_log10_pvalue != 'NaN'
		 ORDER BY neg_log10_pvalue DESC
	]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="OtherAssociationsFromGWAS">
      <column name="source_id"/>
      <column name="allele"/>
      <column name="track_name_link"/>
      <column name="pvalue"/>


      <sql>
	<![CDATA[
		 WITH id AS (##WDK_ID_SQL##),

		 tracks AS (
		 SELECT DISTINCT ta.track, ta.protocol_app_node_id,
		 build_link_attribute(ta.name, '/record/track/', ta.track, ta.description) AS track_name_link
		 FROM NIAGADS.TrackAttributes ta,
		 NIAGADS.ProtocolAppNodeCharacteristic c
		 WHERE ta.protocol_app_node_id = c.protocol_app_node_id
		 AND ta.subcategory = 'GWAS summary statistics'
		 AND ta.dataset_accession NOT LIKE '%CATALOG%'
		 AND c.characteristic_type = 'full_list'
		 AND c.characteristic NOT ILIKE '%Alzh%')
		 
		 SELECT id.source_id, t.*, r.test_allele AS allele, to_char(r.pvalue_display::numeric, '9.99EEEE') as pvalue
		 FROM id, NIAGADS.VariantGWASTopHits r, tracks t
		 WHERE t.protocol_app_node_id = r.protocol_app_node_id
		 AND id.source_id = r.variant_record_primary_key
		 AND r.neg_log10_pvalue > 3
		 AND r.neg_log10_pvalue != 'NaN'
		 ORDER BY neg_log10_pvalue DESC
	]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="ADAssociationsFromCatalog">
      <column name="source_id"/>
      <column name="project_id"/>

      <column name="allele"/>
      <column name="frequency"/>


      <column name="track_name"/>
      <column name="pvalue"/>

      <column name="source"/>
      <column name="pubmed_id"/>
      <column name="study"/>
      <column name="sample"/>
      <column name="replicate_sample"/>
      <column name="trait"/>
      <column name="mapped_efo_trait"/>

      <sql>
	<![CDATA[
		 WITH id AS (##WDK_ID_SQL##),

		 tracks AS (
		 SELECT ta.track, ta.protocol_app_node_id, 'NHGRI-EBI' AS datasource
		 FROM NIAGADS.TrackAttributes ta
		 WHERE track = 'NHGRI_GWAS_CATALOG')
		 
		 SELECT id.source_id,
		 t.datasource AS source,
		 CASE WHEN r.allele = 'N' THEN '?' ELSE r.allele END AS allele,
		 replace(r.pvalue_display, 'E', 'e') AS pvalue,
		 r.neg_log10_pvalue,
		 r.frequency,
		 r.restricted_stats->>'STUDY' AS study,

		 build_link_attribute(replace(r.restricted_stats->>'LINK', 'www.ncbi.nlm.nih.gov/pubmed/', ''), 
		 '@PUBMED_URL@', replace(r.restricted_stats->>'LINK', 'www.ncbi.nlm.nih.gov/pubmed/', ''), NULL) AS pubmed_id,

		 r.restricted_stats->>'INITIAL SAMPLE SIZE' AS sample,

		 CASE WHEN r.restricted_stats->>'REPLICATION SAMPLE SIZE' = 'NA' THEN NULL 
		 ELSE r.restricted_stats->>'REPLICATION SAMPLE SIZE' END  AS replicate_sample,

		 r.restricted_stats->>'DISEASE/TRAIT' AS trait,

		 build_link_attribute(r.restricted_stats->>'MAPPED_TRAIT', 
		 '@EFO_TRAIT_URL@', replace(r.restricted_stats->>'MAPPED_TRAIT_URI', 'http://www.ebi.ac.uk/efo/', ''), NULL) AS mapped_efo_trait

		 FROM Results.VariantGWAS r, tracks t, id
		 WHERE t.protocol_app_node_id = r.protocol_app_node_id
		 AND r.variant_record_primary_key = id.source_id
		 AND r.restricted_stats->>'DISEASE/TRAIT' ILIKE '%Alzheimer%'
		 ORDER BY r.neg_log10_pvalue DESC
	]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="OtherAssociationsFromCatalog">
      <column name="source_id"/>
      <column name="project_id"/>

      <column name="allele"/>
      <column name="frequency"/>

      <column name="track_name"/>
      <column name="pvalue"/>

      <column name="source"/>
      <column name="pubmed_id"/>
      <column name="study"/>
      <column name="sample"/>
      <column name="replicate_sample"/>
      <column name="trait"/>
      <column name="mapped_efo_trait"/>

      <sql>
	<![CDATA[
		 WITH id AS (##WDK_ID_SQL##),

		 tracks AS (
		 SELECT ta.track, ta.protocol_app_node_id, 'NHGRI-EBI' AS datasource
		 FROM NIAGADS.TrackAttributes ta
		 WHERE track = 'NHGRI_GWAS_CATALOG')
		 
		 SELECT id.source_id,
		 t.datasource AS source,
		 CASE WHEN r.allele = 'N' THEN '?' ELSE r.allele END AS allele,
		 replace(r.pvalue_display, 'E', 'e') AS pvalue,
		 r.frequency,
		 r.restricted_stats->>'STUDY' AS study,

		 build_link_attribute(replace(r.restricted_stats->>'LINK', 'www.ncbi.nlm.nih.gov/pubmed/', ''), 
		 '@PUBMED_URL@', replace(r.restricted_stats->>'LINK', 'www.ncbi.nlm.nih.gov/pubmed/', ''), NULL) AS pubmed_id,

		 r.restricted_stats->>'INITIAL SAMPLE SIZE' AS sample,

		 CASE WHEN r.restricted_stats->>'REPLICATION SAMPLE SIZE' = 'NA' THEN NULL 
		 ELSE r.restricted_stats->>'REPLICATION SAMPLE SIZE' END  AS replicate_sample,

		 r.restricted_stats->>'DISEASE/TRAIT' AS trait,

		 build_link_attribute(r.restricted_stats->>'MAPPED_TRAIT', 
		 '@EFO_TRAIT_URL@', replace(r.restricted_stats->>'MAPPED_TRAIT_URI', 'http://www.ebi.ac.uk/efo/', ''), NULL) AS mapped_efo_trait

		 FROM Results.VariantGWAS r, tracks t, id
		 WHERE t.protocol_app_node_id = r.protocol_app_node_id
		 AND r.variant_record_primary_key = id.source_id
		 AND r.restricted_stats->>'DISEASE/TRAIT' NOT ILIKE '%Alzheimer%'
		 ORDER BY r.neg_log10_pvalue DESC
	]]>
      </sql>
    </sqlQuery>

    <!-- =============================================================== -->
    <!-- Variant Classification and Effect -->
    <!-- =============================================================== -->
    <sqlQuery name="TranscriptConsequences">
      <column name="source_id"/>
      <column name="rank"/>
      <column name="exon"/>
      <column name="impact"/>
      <column name="strand"/>
      <column name="is_canonical_transcript"/>
      <column name="gene_link"/>
      <column name="transcript_link"/>
      <column name="protein_link"/>
      <column name="distance"/>
      <column name="consequence"/>
      <column name="is_most_severe_consequence"/>
      <column name="amino_acid_change"/>
      <column name="codon_change"/>
      <column name="is_coding"/>
      <column name="cds_position"/>
      <column name="cdna_position"/>
      <column name="protein_position"/>
      <sql>
	<![CDATA[
		 WITH id AS (##WDK_ID_SQL##),

		 cjson AS (
		 SELECT id.source_id, 
		 jsonb_array_elements(adsp_ranked_consequences(id.source_id, 'transcript')) AS conseq
		 FROM id)

		 SELECT source_id, 
		 CASE WHEN conseq = most_severe_consequence(source_id, TRUE)::JSONB
		 THEN build_icon_attribute(NULL, 'fa-check', 'red', NULL, 'true') 
		 ELSE NULL END AS is_most_severe_consequence,

		 conseq->>'rank' AS rank,
		 conseq->>'exon' AS exon,
		 conseq->>'impact' AS impact,
		 CASE WHEN (conseq->>'strand')::int = 1 THEN '+' ELSE '-' END AS strand,
		 CASE WHEN (conseq->>'canonical')::int = 1 THEN 'Y' ELSE NULL END AS is_canonical_transcript,
		 build_link_attribute(conseq->>'gene_symbol', '/record/gene/', conseq->>'gene_id', 'view gene details') AS gene_link,
		 build_link_attribute(conseq->>'transcript_id', CASE WHEN '@PROJECT_ID@' = 'GRCh37' 
		 THEN '@ENSEMBL_TRANSCRIPT_URL_GRCh37@' ELSE '@ENSEMBL_TRANSCRIPT_URL_GRCh38@' END, 
		 NULL, 'view transcript details from Ensembl' || CASE WHEN '@PROJECT_ID@' = 'GRCh37' 
		 THEN ' @PROJECT_ID@ Archive' ELSE '' END) AS transcript_link,

		 build_link_attribute(conseq->>'protein_id', CASE WHEN '@PROJECT_ID@' = 'GRCh37' 
		 THEN '@ENSEMBL_PROTEIN_URL_GRCh37@' ELSE '@ENSEMBL_PROTEIN_URL_GRCh38@' END, 
		 NULL, 'view protein details from Ensembl' || CASE WHEN '@PROJECT_ID@' = 'GRCh37' 
		 THEN ' @PROJECT_ID@ Archive' ELSE '' END) AS protein_link,
		 
		 conseq->>'distance' AS distance,
		 consequence_terms(conseq) AS consequence,
		 conseq->>'amino_acids' AS amino_acid_change,
		 conseq->>'codons' AS codon_change,

		 CASE WHEN (conseq->>'consequence_is_coding')::boolean 
		 THEN build_icon_attribute(NULL, 'fa-check', 'green', NULL, 'true') ELSE NULL END AS is_coding,

		 CASE WHEN conseq->>'cds_start' = conseq->>'cds_end' THEN conseq->>'cds_start' 
		 ELSE (conseq->>'cds_start')::text || '-' || (conseq->>'cds_end')::text END AS cds_position,

		 CASE WHEN conseq->>'cdna_start' = conseq->>'cdna_end' THEN conseq->>'cdna_start' 
		 ELSE (conseq->>'cdna_start')::text || '-' || (conseq->>'cdna_end')::text END AS cdna_position,

		 CASE WHEN conseq->>'protein_start' = conseq->>'protein_end' 
		 THEN conseq->>'protein_start' 
		 ELSE (conseq->>'protein_start')::text || '-' || (conseq->>'cdna_end')::text END AS protein_position

		 FROM cjson
		 ORDER BY rank
	]]>
      </sql>
    </sqlQuery>


    <sqlQuery name="RegulatoryConsequences">
      <column name="source_id"/>
      <column name="rank"/>
      <column name="feature_biotype"/>
      <column name="feature_link"/>	
      <column name="consequence"/>
      <column name="is_most_severe_consequence"/>
      <column name="impact"/>
      <sql>
	<![CDATA[
		 WITH id AS (##WDK_ID_SQL##),

		 cjson AS (
		 SELECT id.source_id,
		 jsonb_array_elements(adsp_ranked_consequences(id.source_id, 'regulatory')) AS conseq
		 FROM id)

		 SELECT source_id, 

		 CASE WHEN conseq = most_severe_consequence(source_id, TRUE)::JSONB
		 THEN build_icon_attribute(NULL, 'fa-check', 'green', NULL, 'true') 
		 ELSE NULL END AS is_most_severe_consequence,

		 conseq->>'rank' AS rank,
		 conseq->>'impact' AS impact,
		 replace(conseq->>'biotype','_', ' ') AS feature_biotype,

		 build_link_attribute(conseq->>'regulatory_feature_id', CASE WHEN '@PROJECT_ID@' = 'GRCh37' 
		 THEN '@ENSEMBL_REGULATORY_FEATURE_URL_GRCh37@' ELSE '@ENSEMBL_REGULATORY_FEATURE_URL_GRCh38@' END, 
		 NULL, 'view feature details from Ensembl' || CASE WHEN '@PROJECT_ID@' = 'GRCh37' 
		 THEN ' @PROJECT_ID@ Archive' ELSE '' END) AS feature_link,

		 consequence_terms(conseq) AS consequence
		 FROM cjson
		 ORDER BY rank
	]]>
      </sql>
    </sqlQuery>


    <sqlQuery name="IntergenicConsequences">
      <column name="source_id"/>
      <column name="rank"/>
      <column name="consequence"/>
      <column name="is_most_severe_consequence"/>
      <column name="impact"/>
      
      <sql>
	<![CDATA[
		 WITH id AS (##WDK_ID_SQL##),

		 cjson AS (
		 SELECT id.source_id,
		 jsonb_array_elements(adsp_ranked_consequences(id.source_id, 'intergenic')) AS conseq
		 FROM id)

		 SELECT source_id, 

		 CASE WHEN conseq = most_severe_consequence(source_id, TRUE)::JSONB
		 THEN build_icon_attribute(NULL, 'fa-check', 'green', NULL, 'true') 
		 ELSE NULL END AS is_most_severe_consequence,

		 conseq->>'rank' AS rank,
		 conseq->>'impact' AS impact,		
		 consequence_terms(conseq) AS consequence
		 FROM cjson
		 ORDER BY rank
	]]>
      </sql>
    </sqlQuery>

     <sqlQuery name="MotifConsequences">
      <column name="source_id"/>
      <column name="rank"/>
      <column name="feature_biotype"/>
      <column name="motif_link"/>	
      <column name="consequence"/>
      <column name="is_most_severe_consequence"/>
      <column name="impact"/>
      <column name="strand"/>
      <column name="motif_position"/>
      <column name="high_info_position"/>
      <column name="motif_score_change"/>
      <column name="feature_link"/>
      <column name="transcription_factor_complex"/>
      <column name="epigenomes"/>
      
      <sql>
	<![CDATA[
		 WITH id AS (##WDK_ID_SQL##),

		 cjson AS (
		 SELECT id.source_id,
		 jsonb_array_elements(adsp_ranked_consequences(id.source_id, 'motif')) AS conseq
		 FROM id)

		 SELECT source_id, 

		 CASE WHEN conseq = most_severe_consequence(source_id, TRUE)::JSONB
		 THEN build_icon_attribute(NULL, 'fa-check', 'green', NULL, 'true') 
		 ELSE NULL END AS is_most_severe_consequence,

		 conseq->>'rank' AS rank,
		 conseq->>'impact' AS impact,
		 consequence_terms(conseq) AS consequence,

		 array_to_string(json_array_cast_to_text((m.annotation->'transcription_factor_complex')::json), ',') 
		 AS transcription_factor_complex,

		 array_to_string(json_array_cast_to_text((m.annotation->'epigenomes_with_experimental_evidence')::json), ',') 
		 AS epigenomes,

		 m.feature_type AS feature_biotype,
		 CASE WHEN (conseq->>'strand')::int = 1 THEN '+' ELSE '-' END AS strand,

		 conseq->>'motif_pos' AS motif_position,
		 conseq->>'high_inf_pos' AS high_info_position,
		 CASE WHEN (conseq->>'motif_score_change')::numeric > 0 
		 THEN build_icon_attribute(NULL, 'fa-caret-up', 'green', NULL, conseq->>'motif_score_change')
		 ELSE build_icon_attribute(NULL, 'fa-caret-down', 'red', NULL, conseq->>'motif_score_change')
		 END AS motif_score_change,

		 build_link_attribute(m.matrix_id, 
		 CASE WHEN '@PROJECT_ID@' = 'GRCh37' 
		 THEN '@ENSEMBL_MOTIF_FEATURE_URL_GRCh37@' 
		 ELSE '@ENSEMBL_MOTIF_FEATURE_URL_GRCh38@' END, 
		 NULL, 'view motif from Ensembl' || CASE WHEN '@PROJECT_ID@' = 'GRCh37' 
		 THEN ' @PROJECT_ID@ Archive' ELSE '' END) AS feature_link

		 FROM cjson, Results.Motif m
		 WHERE m.motif_source_id = cjson.conseq->>'motif_name'
		 AND m.chromosome = 'chr' || split_part(cjson.source_id, ':', 1)

		 ORDER BY rank
	]]>
      </sql>
    </sqlQuery>


  </querySet>
</wdkModel>
