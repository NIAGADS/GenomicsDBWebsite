<?xml version="1.0" encoding="UTF-8"?>
<wdkModel>

  <querySet name="GeneAttributes" queryType="attribute" isCacheable="false">

    <defaultTestParamValues>
      <paramValue name="source_id">PVRL2</paramValue>
    </defaultTestParamValues>

    <testRowCountSql>
      select count(*) from CBIL.GeneAttributes
    </testRowCountSql>


    <!-- =================================================================== -->
    <!-- Alias -->
    <!-- for now just for current gene symbol  -->
    <!-- =================================================================== -->
    <sqlQuery name="GeneAlias" doNotTest="true">
      <column name="source_id" columnType="string"/>
      <column name="project_id" columnType="string"/>
      <column name="old_source_id" columnType="string"/>
      <sql>
        <![CDATA[
                WITH gs AS (
                  SELECT ga.source_id,
                  '@PROJECT_ID@'::text AS project_id,
                  ga.gene_symbol AS old_source_id
                  FROM CBIL.GeneAttributes ga,
                  (##WDK_ID_SQL##) ids
                  WHERE ga.gene_symbol = ids.old_source_id
                  ORDER BY annotation LIMIT 1)
		       SELECT * FROM gs
		       UNION
		       SELECT ga.source_id,
		       '@PROJECT_ID@'::text AS project_id,
		       ga.source_id AS old_source_id
		       FROM CBIL.GeneAttributes ga
	      ]]>
      </sql>
    </sqlQuery>

    <!-- =============================================================== -->
    <!-- Basic Attributes -->
    <!-- =============================================================== -->

    <sqlQuery name="BasicAttributes">
      <column name="source_id" columnType="string"/>
      <column name="project_id" columnType="string"/>
      <column name="gene_symbol" columnType="string"/>
      <column name="gene_type" columnType="string"/>
      <column name="chromosome" columnType="string"/>
      <column name="location_start" columnType="number"/>
      <column name="location_end" columnType="number"/>
      <column name="span" columnType="string"/>
      <column name="location" columnType="string"/>
      <column name="gene_name" columnType="string"/>
      <column name="hgnc_id" columnType="string"/>
      <column name="omim_id" columnType="string"/>
      <column name="ucsc_id" columnType="string"/>
      <column name="vega_id" columnType="string"/>
      <column name="entrez_id" columnType="string"/>
      <column name="ensembl_id" columnType="string"/>
      <column name="uniprot_id" columnType="string"/>
      <column name="synonyms" columnType="string"/>
      <column name="strand" columnType="string"/>
      <column name="is_reversed" columnType="boolean"/>
      <column name="full_jbrowse_link" columnType="string"/>
      <column name="jbrowse_source_url" columnType="string"/>
      <column name="dynspan_link" columnType="string"/>

      <sql>
        <![CDATA[
            SELECT source_id, 
            '@PROJECT_ID@'::text AS project_id,
            gene_symbol,
            gene_symbol AS display_id,
            gene_type,
            chromosome,
            location_start,
            location_end,
            build_link_attribute(replace(chromosome,'chr','') || ':' || (location_start - 1000)::text || '..' || (location_end + 1000)::text,
            '/genomics/jbrowse.jsp?loc=', NULL, NULL) AS full_jbrowse_link,
            '/genomics/rjbrowse/?loc=' || replace(chromosome,'chr','') || ':' || (location_start - 1000)::text || '..' || (location_end + 1000)::text || '&' || 'tracks=@GENE_DEFAULT_TRACKS@' AS jbrowse_source_url,
            annotation->>'location' AS location,
            annotation->>'name' AS gene_name,
            annotation->>'hgnc_id' AS hgnc_id,
            annotation->>'omim_id' AS omim_id,
            annotation->>'ucsc_id' AS ucsc_id,
            annotation->>'vega_id' AS vega_id,
            annotation->>'entrez_id' AS entrez_id,
            /* annotation->>'ccds_id' AS ccds_id,
            annotation->>'cosmic_id' AS cosmic_id,
            annotation->>'orphanet' AS orphanet_id,
            annotation->>'ena' AS ena_id, */
            chromosome || ':' || location_start::text || '-' || location_end::text || ':' 
              || CASE WHEN is_reversed THEN '-' ELSE '+' END  AS span,
            build_link_attribute(chromosome || ':' || location_start::text || '-' || location_end::text || ':' 
              || CASE WHEN is_reversed THEN '-' ELSE '+' END, '@DYNSPAN_RECORD@', NULL, NULL) AS dynspan_link,
            replace(annotation->>'uniprot_ids', '|', '//') AS uniprot_id,
            source_id AS ensembl_id,
            array_to_string(string_to_array(annotation->>'prev_symbol', '|') || string_to_array(annotation->>'alias_symbol', '|'), ', ') AS synonyms,
            CASE WHEN is_reversed THEN '-' ELSE '+' END AS strand,
            is_reversed
            FROM CBIL.GeneAttributes
        ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="InformationLinks">
      <column name="source_id"/>
      <column name="third_party_data_links"/>
      <sql>
        <![CDATA[
		          SELECT source_id, 
                 jsonb_build_array_check_nulls(
                 build_badge_attribute('PubMed', '@PUBMED_GENE_SEARCH_URL@' ,annotation->>'entrez_id'),
                 build_badge_attribute('STRINGdb','@STRINGDB_URL@', source_id),
                 build_badge_attribute('ExAC', '@EXAC_GENE_URL@', source_id),
                 build_badge_attribute('UCSC', 
		             CASE WHEN '@PROJECT_ID@' = 'GRCh37' THEN '@UCSC_BROWSER_URL_GRCh37@' 
                 ELSE '@UCSC_BROWSER_URL_GRCh38@' END, annotation->>'ucsc_id','view against @PROJECT_ID@ assembly'))
                 AS third_party_data_links
		          FROM CBIL.GeneAttributes
	          ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="RecordLinks" doNotTest="true">
      <column name="source_id"/>
      <column name="record_link_outs"/>
      <sql>
        <![CDATA[
                  WITH UniProtIds AS (
                    SELECT source_id, unnest(string_to_array(annotation->>'uniprot_ids', '|')) AS uniprot_id FROM
                    CBIL.GeneAttributes 
                  ),
                  UniProtLinks AS (
                    SELECT source_id, jsonb_agg(build_link_attribute(uniprot_id, '@UNIPROT_URL@')) as link_attribute
                    FROM UniProtIds
                    GROUP BY source_id)
                  SELECT ga.source_id, jsonb_build_object('type', 'dictionary', 'style', 'description_list', 'data',
                  jsonb_build_array_check_nulls (
                  build_dictionary_element('HUGO', build_link_attribute(annotation->>'hgnc_id', '@HGNC_URL@')),
                  build_dictionary_element('OMIM', build_link_attribute(annotation->>'omim_id', '@OMIM_URL@')),
                  build_dictionary_element('VEGA', build_link_attribute(annotation->>'vega_id', '@VEGA_URL@', NULL, CASE WHEN '@PROJECT_ID@' = 'GRCh37' THEN '@PROJECT_ID@ Archive' ELSE NULL END)),
                  build_dictionary_element('NCBI Gene', build_link_attribute(annotation->>'entrez_id', '@NCBI_ENTREZ_GENE_URL@')),
                  build_dictionary_element('Ensembl', build_link_attribute(ga.source_id, CASE WHEN '@PROJECT_ID@' = 'GRCh37' THEN '@ENSEMBL_GENE_URL_GRCh37@' ELSE '@ENSEMBL_GENE_URL_GRCh38@' END, NULL,
                  CASE WHEN '@PROJECT_ID@' = 'GRCh37' THEN '@PROJECT_ID@ Archive' ELSE NULL END)),
                  build_dictionary_element('UniProt', CASE WHEN jsonb_array_length(u.link_attribute) = 1 THEN u.link_attribute->0 ELSE u.link_attribute END) -- don't return array if 1 value
                  )) AS record_link_outs
                  FROM CBIL.GeneAttributes ga LEFT OUTER JOIN UniProtLinks u
                  ON ga.source_id = u.source_id
          ]]>
      </sql>
    </sqlQuery>

    <!-- =============================================================== -->
    <!-- Genomic Location -->
    <!-- =============================================================== -->

    <sqlQuery name="ColocatedVariantCount">
      <column name="source_id"/>
      <column name="num_colocated_variants"/>
      <column name="num_unique_colocated_variants"/>
      <sql>
        <![CDATA[
                  SELECT ga.source_id, build_badge_attribute(count(v.record_pk)::text, '@VARIANTS_BY_FEATURE_SEARCH@', ga.source_id, 'run a search to retrieve the full list') AS num_colocated_variants,
                  count(DISTINCT split_part(v.record_pk, ':', 2)) AS num_unique_colocated_variants
                  FROM CBIL.GeneAttributes ga,
                  NIAGADS.Variant v
                  WHERE  ga.bin_index @> v.bin_index
                  AND numrange(ga.location_start, ga.location_end, '[]') @> v.location_start::numeric
                  GROUP BY ga.source_id
                ]]>
      </sql>
    </sqlQuery>


    <!-- =============================================================== -->
    <!-- AD Risk -->
    <!-- =============================================================== -->

    <sqlQuery name="ADEvidenceFlag">
      <column name="source_id"/>
      <column name="has_ad_evidence"/>
      <column name="ad_evidence_flag"/>

      <sql>
        <![CDATA[    
                      SELECT source_id, 
                      CASE WHEN gene_id % 2 = 0 THEN 'Y' ELSE NULL END AS has_ad_evidence,
                      CASE WHEN gene_id % 2 = 0 THEN jsonb_build_object('type', 'icon', 'icon', 'fa-check', 'color', 'red', 'value', 'Y') ELSE NULL END AS ad_evidence_flag
                      FROM CBIL.GeneAttributes  
                  ]]>
      </sql>
    </sqlQuery>


    <sqlQuery name="GWSVariantsPlot">
      <column name="source_id" columnType="string"/>
      <column name="gws_variants_summary_highchart" columnType="string"/>
      <sql>
        <![CDATA[
    WITH
    topResults AS
    (
        SELECT
            protocol_app_node_id,
            variant_id,
            bin_index,
            split_part(metaseq_id, ':', 2)::NUMERIC AS position
        FROM
            Results.VariantGWAS r
        WHERE
            r.neg_log10_pvalue >= -1 * log(5e-8)
    )
    ,
    ids AS
    (
      ##WDK_ID_SQL##
    )
    ,
    phenotype AS
    (
        SELECT DISTINCT
            t.protocol_app_node_id,
            c.characteristic_type AS category,
            CASE
                WHEN c.characteristic_type = 'diagnosis'
                THEN
                    CASE
                        WHEN c.characteristic ILIKE '%Alzheimer%'
                        THEN 'AD'
                        WHEN c.characteristic ILIKE 'Progressive%'
                        THEN 'PSP'
                        WHEN c.characteristic ILIKE 'Frontotemporal%'
                        THEN 'FTD'
                        WHEN c.characteristic ILIKE 'Lewy%'
                        THEN 'LBD'
                        WHEN c.characteristic = 'dementia'
                        THEN 'DEM'
                    END
                WHEN c.characteristic_type = 'neuropathology'
                THEN -- neuropathology
                    CASE
                        WHEN c.characteristic ILIKE '%Braak%'
                        THEN 'Braak'
                        WHEN c.characteristic ILIKE '%CERAD%'
                        THEN 'CERAD'
                        WHEN c.characteristic ILIKE '%angiopathy%'
                        THEN 'CAA'
                        WHEN c.characteristic ILIKE '%hippo%'
                        THEN 'Hs-Aging'
                        WHEN c.characteristic ILIKE 'Lewy%'
                        THEN 'LB'
                        WHEN c.characteristic ILIKE '%plaques%'
                        THEN 'NP'
                        WHEN c.characteristic ILIKE '%tangles%'
                        THEN 'NT'
                        WHEN c.characteristic ILIKE '%vascular%'
                        THEN 'VBI'
                    END
                ELSE
                    CASE
                        WHEN c.characteristic ILIKE '%Beta%'
                        THEN 'AB42'
                        ELSE c.characteristic
                    END
            END AS phenotype
        FROM
            NIAGADS.TrackAttributes t,
            NIAGADS.ProtocolAppNodeCharacteristic c
        WHERE
            t.subcategory = 'GWAS summary statistics'
        AND t.dataset_accession NOT LIKE '%CATALOG%'
        AND c.protocol_app_node_id = t.protocol_app_node_id
        AND c.characteristic_type IN ('diagnosis',
                                      'neuropathology',
                                      'biomarker')
        AND c.characteristic != 'autopsy-based diagnosis'
    )
    ,
    GeneResults AS
    (
        SELECT
            ga.source_id,
            ga.gene_symbol,
            r.protocol_app_node_id,
            r.variant_id,
            r.position,
            CASE
                WHEN r.position < ga.location_start
                THEN 'upstream'
                WHEN r.position > ga.location_end
                THEN 'downstream'
                ELSE 'in gene'
            END AS relative_position
        FROM
            topResults r,
            CBIL.GeneAttributes ga,
            ids
        WHERE
            ids.source_id = ga.source_id
        AND (
                SELECT
                    find_bin_index(ga.chromosome, ga.location_start - 100000, ga.location_end + 100000)) @> r.bin_index
        AND numrange(ga.location_start - 100000, ga.location_end + 100000, '[]') @> r.position
    )
    ,
    geneResultSummary AS
    (
        SELECT
            r.source_id,
            r.gene_symbol,
            COUNT(position) AS n_variants,
            p.phenotype,
            r.relative_position,
            category
        FROM
            geneResults r,
            phenotype p
        WHERE
            r.protocol_app_node_id = p.protocol_app_node_id
        GROUP BY
            source_id,
            r.gene_symbol,
            phenotype,
            relative_position,
            category
    )
    ,
    diagnosis AS
    (
        SELECT
            r.source_id,
            jsonb_build_object(
                'title', 'Diagnosis',
                'categories', jsonb_agg(DISTINCT phenotype ORDER BY phenotype),
                'series', jsonb_build_array(
                        jsonb_build_object(
                                'name', 'downstream',
                                'data', jsonb_agg(n_variants ORDER BY phenotype) FILTER (WHERE relative_position = 'downstream')
                        ),
                        jsonb_build_object(
                                'name', 'in gene',
                                'data', jsonb_agg(n_variants ORDER BY phenotype) FILTER (WHERE relative_position = 'in gene')
                        ),
                        jsonb_build_object(
                                'name', 'upstream',
                                'data', jsonb_agg(n_variants ORDER BY phenotype) FILTER (WHERE relative_position = 'upstream')
                        ) 
           )) AS chart_data
        FROM
            GeneResultSummary r
        WHERE
            category = 'diagnosis'
        GROUP BY
            source_id
    )
    ,
    neuropathology AS
    (
        SELECT
            r.source_id,
            jsonb_build_object(
                'title', 'Neuropathology',
                'categories', jsonb_agg(DISTINCT phenotype ORDER BY phenotype),
                'series', jsonb_build_array(
                        jsonb_build_object(
                                'name', 'downstream',
                                'data', jsonb_agg(n_variants ORDER BY phenotype) FILTER (WHERE relative_position = 'downstream')
                        ),
                        jsonb_build_object(
                                'name', 'in gene',
                                'data', jsonb_agg(n_variants ORDER BY phenotype) FILTER (WHERE relative_position = 'in gene')
                        ),
                        jsonb_build_object(
                                'name', 'upstream',
                                'data', jsonb_agg(n_variants ORDER BY phenotype) FILTER (WHERE relative_position = 'upstream')
                        ) 
           )) AS chart_data
        FROM
            GeneResultSummary r
        WHERE
            category = 'neuropathology'
        GROUP BY
            source_id
    ), 
    biomarker AS
    (
        SELECT
            r.source_id,
            jsonb_build_object(
                'title', 'Biomarker',
                'categories', jsonb_agg(DISTINCT phenotype ORDER BY phenotype),
                'series', jsonb_build_array(
                        jsonb_build_object(
                                'name', 'downstream',
                                'data', jsonb_agg(n_variants ORDER BY phenotype) FILTER (WHERE relative_position = 'downstream')
                        ),
                        jsonb_build_object(
                                'name', 'in gene',
                                'data', jsonb_agg(n_variants ORDER BY phenotype) FILTER (WHERE relative_position = 'in gene')
                        ),
                        jsonb_build_object(
                                'name', 'upstream',
                                'data', jsonb_agg(n_variants ORDER BY phenotype) FILTER (WHERE relative_position = 'upstream')
                        ) 
           )) AS chart_data
        FROM
            GeneResultSummary r
        WHERE
            category = 'biomarker'
        GROUP BY
            source_id
    )	                       

    SELECT ids.source_id,
    jsonb_build_array_check_nulls((SELECT chart_data FROM diagnosis), (SELECT chart_data FROM neuropathology), (SELECT chart_data FROM biomarker))::text AS gws_variants_summary_highchart
    FROM ids
        ]]>
      </sql>
    </sqlQuery>
  </querySet>
</wdkModel>
