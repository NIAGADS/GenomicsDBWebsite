<?xml version="1.0" encoding="UTF-8"?>
<wdkModel>
	<querySet name="GeneTables" queryType="table" isCacheable="false">

		<!-- =============================================================== -->
		<!-- Link Outs -->
		<!-- =============================================================== -->

		<sqlQuery name="DbRefs_Gene">
			<column name="source_id"/>
			<column name="external_links"/>
			<column name="external_id"/>
			<sql>
				<![CDATA[
		 SELECT ga.source_id,
		 '@PROJECT_ID@'::text AS project_id,
		 a.external_id,
		 jsonb_agg(build_link_attribute(drl.resource_abbrev, drl.url, a.external_id, drl.resource_full_name)) AS external_links
		 FROM
		 CBIL.DbRefLink drl,
		 CBIL.GeneAttributes ga,
		 LATERAL jsonb_each(annotation),
		 LATERAL UNNEST(string_to_array(replace(value::text, '"',''), '|')) a(external_id)
		 WHERE drl.dbref_id = key
		 AND drl.resource_type = 'gene'
		 GROUP BY ga.source_id, a.external_id, '@PROJECT_ID@'::text
		 ORDER BY ga.source_id, a.external_id
			]]>
			</sql>

		</sqlQuery>

		<sqlQuery name="DbRefs_Clinical">
			<column name="source_id"/>
			<column name="external_links"/>
			<column name="external_id"/>
			<sql>
				<![CDATA[
		 SELECT ga.source_id,
		 '@PROJECT_ID@'::text AS project_id,
		 a.external_id,
		 jsonb_agg(build_link_attribute(drl.resource_abbrev, drl.url, a.external_id, drl.resource_full_name)) AS external_links
		 FROM
		 CBIL.DbRefLink drl,
		 CBIL.GeneAttributes ga,
		 LATERAL jsonb_each(annotation),
		 LATERAL UNNEST(string_to_array(replace(value::text, '"',''), '|')) a(external_id)
		 WHERE drl.dbref_id = key
		 AND drl.resource_type = 'clinical'
		 GROUP BY ga.source_id, a.external_id, '@PROJECT_ID@'::text
		 ORDER BY ga.source_id, a.external_id
	]]>
			</sql>
		</sqlQuery>

		<sqlQuery name="DbRefs_NSeq">
			<column name="source_id"/>
			<column name="external_links"/>
			<column name="external_id"/>
			<sql>
				<![CDATA[
		 SELECT ga.source_id,
		 '@PROJECT_ID@'::text AS project_id,
		 a.external_id,
		 jsonb_agg(build_link_attribute(drl.resource_abbrev, drl.url, a.external_id, drl.resource_full_name)) AS external_links
		 FROM
		 CBIL.DbRefLink drl,
		 CBIL.GeneAttributes ga,
		 LATERAL jsonb_each(annotation),
		 LATERAL UNNEST(string_to_array(replace(value::text, '"',''), '|')) a(external_id)
		 WHERE drl.dbref_id = key
		 AND drl.resource_type = 'nucleotide sequences'
		 GROUP BY ga.source_id, a.external_id, '@PROJECT_ID@'::text
		 ORDER BY ga.source_id, a.external_id
	]]>
			</sql>
		</sqlQuery>

		<sqlQuery name="DbRefs_Proteins">
			<column name="source_id"/>
			<column name="external_links"/>
			<column name="external_id"/>
			<sql>
				<![CDATA[
		 SELECT ga.source_id,
		 '@PROJECT_ID@'::text AS project_id,
		 a.external_id,
		 jsonb_agg(build_link_attribute(drl.resource_abbrev, drl.url, a.external_id, drl.resource_full_name)) AS external_links
		 FROM
		 CBIL.DbRefLink drl,
		 CBIL.GeneAttributes ga,
		 LATERAL jsonb_each(annotation),
		 LATERAL UNNEST(string_to_array(replace(value::text, '"',''), '|')) a(external_id)
		 WHERE drl.dbref_id = key
		 AND drl.resource_type = 'protein'
		 GROUP BY ga.source_id, a.external_id, '@PROJECT_ID@'::text
		 ORDER BY ga.source_id, a.external_id
	]]>
			</sql>
		</sqlQuery>

		<!-- =============================================================== -->
		<!-- Genomic Location -->
		<!-- =============================================================== -->

		<sqlQuery name="Transcripts">
			<column name="source_id"/>
			<column name="project_id"/>
			<column name="transcript_name"/>
			<column name="transcript_accession_link"/>
			<column name="location_start"/>
			<column name="location_end"/>
			<column name="num_variants"/>

			<sql>
				<![CDATA[
					SELECT gene_source_id AS source_id,
					transcript_name,
					build_link_attribute(transcript_source_id,
					CASE WHEN '@PROJECT_ID@' = 'GRCh37' THEN '@ENSEMBL_TRANSCRIPT_URL_GRCh37@' ELSE '@ENSEMBL_TRANSCRIPT_URL_GRCh38@' END, NULL, NULL) AS transcript_accession_link,
					ta.location_start,
					ta.location_end,
					build_link_attribute(count(v.variant_id)::text, '@VARIANTS_BY_FEATURE_SEARCH@', transcript_source_id, NULL) AS num_variants
					FROM NIAGADS.TranscriptAttributes ta,
					NIAGADS.Variant v
					WHERE ta.bin_index @> v.bin_index
					AND numrange(ta.location_start, ta.location_end, '[]') @> v.location_start::numeric
					GROUP BY gene_source_id, transcript_name, transcript_source_id, ta.location_start, ta.location_end
					ORDER BY transcript_name
				]]>
			</sql>
		</sqlQuery>

		<!-- =============================================================== -->
		<!-- Genetic Variation -->
		<!-- =============================================================== -->
		<sqlQuery name="GeneEvidence">
			<column name="source_id"/>

			<column name="resource_accession"/>
			<column name="track"/>
			<column name="track_name"/>
			<column name="track_description"/>

			<column name="p_value_display" sortingColumn="p_value"/>
			<column name="p_value"/>
			<column name="rho"/>
			<column name="cumulative_maf"/>
			<column name="cumulative_mac"/>
			<column name="cumulative_display" sortingColumn="cumulative_maf"/>
			<column name="num_snps"/>
			<column name="filter_function"/>
			<column name="population"/>
			<column name="covariates"/>
			<column name="warning"/>
			<column name="error"/>
			<sql>
				<![CDATA[
				]]>
			</sql>

		</sqlQuery>


		<sqlQuery name="ADVariantsFromGWAS">
			<column name="source_id"/>
			<column name="project_id"/>
			<column name="variant"/>
			<column name="ref_snp_id"/>
			<column name="allele"/>

			<column name="relative_position"/>
			<column name="track_name"/>
			<column name="pvalue"/>
			<column name="accession_link"/>
			<column name="adsp_variant_flag"/>

			<sql>
				<![CDATA[
				WITH track AS (
				SELECT  DISTINCT t.protocol_app_node_id, 
				build_text_attribute(t.name, t.description, NULL) AS track_name,
				da.accession_link
				FROM NIAGADS.TrackAttributes t,
				NIAGADS.DatasetAttributes da,
				Study.Characteristic c,
				SRes.OntologyTerm ot,
				SRes.OntologyTerm qot
				WHERE t.dataset_accession = da.accession
				AND subcategory = 'GWAS summary statistics'
				AND dataset_accession NOT LIKE '%CATALOG%'
				AND c.protocol_app_node_id = t.protocol_app_node_id
				AND c.ontology_term_id = ot.ontology_term_id
				AND ot.name ILIKE '%Alzh%'
				AND qot.ontology_term_id = c.qualifier_id
				AND qot.name = 'diagnosis'
				),
				
				Variants AS (
				SELECT ga.source_id, v.variant_id,
				CASE WHEN v.source_id LIKE 'rs%' THEN v.source_id ELSE NULL END AS ref_snp_id,
				build_link_attribute(
				CASE 
				WHEN length(v.metaseq_id) > 30 THEN substr(v.metaseq_id, 0, 27) 
				ELSE v.metaseq_id END, 
				'../variant/', v.record_pk, 
				CASE 
				WHEN length(v.metaseq_id) > 30 THEN v.metaseq_id ELSE NULL END
				) || jsonb_build_object ('primary_key', v.record_pk) AS variant,		 
				CASE WHEN is_adsp_variant THEN build_icon_attribute(NULL, 'fa-check', 'red', NULL, 'true') ELSE NULL END AS adsp_variant_flag,
				CASE
				WHEN v.location_start < ga.location_start THEN build_text_attribute('upstream', NULL, 'red')::text
				WHEN v.location_start > ga.location_end THEN build_text_attribute('downstream', NULL, 'green')::text
				ELSE build_text_attribute('in gene', NULL, NULL)::text END AS relative_position
				FROM
				CBIL.GeneAttributes ga,
				NIAGADS.Variant v,
				(##WDK_ID_SQL##) ids
				WHERE ga.source_id = ids.source_id
				AND (SELECT find_bin_index(ga.chromosome, ga.location_start - 100000, ga.location_end + 100000)) @> v.bin_index
				AND numrange(ga.location_start - 100000, ga.location_end + 100000, '[]') @> v.location_start::NUMERIC
				)
				
				SELECT
				v.*,		
				ta.track_name,
				ta.accession_link,
				to_char(r.pvalue_display::numeric, '9.99EEEE') as pvalue,
				r.allele
				FROM
				Results.VariantGWAS r,
				track ta,
				Variants v	
				WHERE ta.protocol_app_node_id = r.protocol_app_node_id
				AND r.neg_log10_pvalue >= 3.0

				AND r.variant_id = v.variant_id 
				ORDER BY
				r.neg_log10_pvalue DESC
			]]>
			</sql>
		</sqlQuery>

		<sqlQuery name="OtherVariantsFromGWAS">
			<column name="source_id"/>
			<column name="project_id"/>
			<column name="variant"/>
			<column name="ref_snp_id"/>
			<column name="allele"/>

			<column name="relative_position"/>
			<column name="track_name"/>
			<column name="pvalue"/>
			<column name="accession_link"/>
			<column name="adsp_variant_flag"/>

			<sql>
				<![CDATA[
					WITH track AS (
					SELECT  DISTINCT t.protocol_app_node_id, 
					build_text_attribute(t.name, t.description, NULL) AS track_name,
					da.accession_link
					FROM NIAGADS.TrackAttributes t,
					NIAGADS.DatasetAttributes da,
					Study.Characteristic c,
					SRes.OntologyTerm ot,
					SRes.OntologyTerm qot
					WHERE t.dataset_accession = da.accession
					AND subcategory = 'GWAS summary statistics'
					AND dataset_accession NOT LIKE '%CATALOG%'
					AND c.protocol_app_node_id = t.protocol_app_node_id
					AND c.ontology_term_id = ot.ontology_term_id
					AND ot.name NOT ILIKE '%Alzh%'
					AND qot.ontology_term_id = c.qualifier_id
					AND qot.name = 'diagnosis'
					),
					
					Variants AS (
					SELECT ga.source_id, v.variant_id,
					CASE WHEN v.source_id LIKE 'rs%' THEN v.source_id ELSE NULL END AS ref_snp_id,
					build_link_attribute(
					CASE 
					WHEN length(v.metaseq_id) > 30 THEN substr(v.metaseq_id, 0, 27) 
					ELSE v.metaseq_id END, 
					'../variant/', v.record_pk, 
					CASE 
					WHEN length(v.metaseq_id) > 30 THEN v.metaseq_id ELSE NULL END
					) || jsonb_build_object ('primary_key', v.record_pk) AS variant,		 
					CASE WHEN is_adsp_variant THEN build_icon_attribute(NULL, 'fa-check', 'red', NULL, 'true') ELSE NULL END AS adsp_variant_flag,
					CASE
					WHEN v.location_start < ga.location_start THEN build_text_attribute('upstream', NULL, 'red')::text
					WHEN v.location_start > ga.location_end THEN build_text_attribute('downstream', NULL, 'green')::text
					ELSE build_text_attribute('in gene', NULL, NULL)::text END AS relative_position
					FROM
					CBIL.GeneAttributes ga,
					NIAGADS.Variant v,
					(##WDK_ID_SQL##) ids
					WHERE ga.source_id = ids.source_id
					AND (SELECT find_bin_index(ga.chromosome, ga.location_start - 100000, ga.location_end + 100000)) @> v.bin_index
					AND numrange(ga.location_start - 100000, ga.location_end + 100000, '[]') @> v.location_start::NUMERIC
					)
					
					SELECT
					v.*,		
					ta.track_name,
					ta.accession_link,
					to_char(r.pvalue_display::numeric, '9.99EEEE') as pvalue,
					r.allele
					FROM
					Results.VariantGWAS r,
					track ta,
					Variants v	
					WHERE ta.protocol_app_node_id = r.protocol_app_node_id
					AND r.neg_log10_pvalue >= 3.0

					AND r.variant_id = v.variant_id 
					ORDER BY
					r.neg_log10_pvalue DESC	
				]]>
			</sql>
		</sqlQuery>


		<sqlQuery name="ADVariantsFromCatalog">
			<column name="source_id"/>
			<column name="project_id"/>
			<column name="variant"/>
			<column name="ref_snp_id"/>
			<column name="allele"/>
			<column name="frequency"/>

			<column name="relative_position"/>
			<column name="track_name"/>
			<column name="pvalue"/>
			<column name="adsp_variant_flag"/>

			<column name="source"/>
			<column name="pubmed_id"/>
			<column name="study"/>
			<column name="sample"/>
			<column name="replicate_sample"/>
			<column name="trait"/>
			<sql>
				<![CDATA[
					SELECT source_id, variant_id, ref_snp_id, variant, relative_position, adsp_variant_flag, source, pvalue, allele, frequency,
					pubmed_id, study, sample, replicate_sample,  string_agg(DISTINCT trait, '//' ORDER BY trait) AS trait FROM (
					WITH Variants AS (
					SELECT ga.source_id,
					v.variant_id,

					CASE WHEN v.source_id LIKE 'rs%' THEN v.source_id ELSE NULL END AS ref_snp_id,
					build_link_attribute(
					CASE WHEN length(v.metaseq_id) > 30 THEN substr(v.metaseq_id, 0, 27) 
					ELSE v.metaseq_id END, 
					'../variant/', v.record_pk, 
					CASE WHEN length(v.metaseq_id) > 30 THEN v.metaseq_id ELSE NULL END
					) || jsonb_build_object ('primary_key', v.record_pk) AS variant,

					CASE WHEN v.location_start < ga.location_start THEN build_text_attribute('upstream', NULL, 'red')::text
					WHEN v.location_start > ga.location_end THEN build_text_attribute('downstream', NULL, 'green')::text
					ELSE build_text_attribute('in gene', NULL, NULL)::text END AS relative_position,     

					CASE WHEN is_adsp_variant THEN build_icon_attribute(NULL, 'fa-check', 'red', NULL, 'true') ELSE NULL END AS adsp_variant_flag
					
					
					FROM CBIL.GeneAttributes ga, 
					(##WDK_ID_SQL##) ids,
					NIAGADS.Variant v

					WHERE ga.source_id = ids.source_id
					AND (SELECT find_bin_index(ga.chromosome, ga.location_start - @FLANKING_REGION@, ga.location_end + @FLANKING_REGION@)) @> v.bin_index
					AND numrange(ga.location_start - @FLANKING_REGION@, ga.location_end + @FLANKING_REGION@, '[]') @> v.position::NUMERIC)
					
					SELECT v.*,
					CASE WHEN ta.track LIKE 'NHGRI%' THEN 'NHGRI' ELSE 'NIAGADS' END AS source,
					
					to_char(r.pvalue_display::numeric, '9.99EEEE') as pvalue,
					r.allele,
					r.frequency,
					ot.name AS trait,
					build_link_attribute(r.evidence->>'PUBMEDID', '@PUBMED_URL@', null, null) AS pubmed_id,
					build_text_attribute(CASE WHEN LENGTH(r.evidence->>'STUDY') > 50 THEN LEFT(r.evidence->>'STUDY', 50) || ' ...' ELSE r.evidence->>'STUDY' END,
					CASE WHEN LENGTH(r.evidence->>'STUDY') > 50 THEN  r.evidence->>'STUDY' ELSE NULL END, NULL) AS study,
					evidence->>'INITIAL SAMPLE SIZE' AS sample,
					CASE WHEN evidence->>'REPLICATION SAMPLE SIZE' = 'NA' THEN NULL ELSE evidence->>'REPLICATION SAMPLE SIZE' END AS replicate_sample
					FROM
					
					Variants v,
					Results.VariantCatalog r,
					SRes.OntologyTerm ot,
					NIAGADS.TrackAttributes ta
					WHERE ta.track LIKE '%CATALOG%'
					AND ta.protocol_app_node_id = r.protocol_app_node_id
					AND ot.ontology_term_id = r.ontology_term_id
					AND (ot.name ILIKE '%Alzh%' AND ot.name NOT ILIKE '%biomarker%' AND ot.name NOT ILIKE '%measurement%')
					AND r.variant_id = v.variant_id 
					
					ORDER BY
					r.neg_log10_pvalue DESC) a
					GROUP BY  source_id, variant_id, ref_snp_id, variant, relative_position, adsp_variant_flag, source, pvalue, allele, frequency,
					pubmed_id, study, sample, replicate_sample
				]]>
			</sql>
		</sqlQuery>

		<sqlQuery name="OtherVariantsFromCatalog">
			<column name="source_id"/>
			<column name="project_id"/>
			<column name="variant"/>
			<column name="ref_snp_id"/>
			<column name="allele"/>
			<column name="frequency"/>

			<column name="relative_position"/>
			<column name="track_name"/>
			<column name="pvalue"/>

			<column name="adsp_variant_flag"/>
			<column name="source"/>
			<column name="pubmed_id"/>
			<column name="study"/>
			<column name="sample"/>
			<column name="replicate_sample"/>
			<column name="trait"/>

			<sql>
				<![CDATA[
					SELECT source_id, variant_id, ref_snp_id, variant, relative_position, adsp_variant_flag, source, pvalue, allele, frequency,
					pubmed_id, study, sample, replicate_sample,  string_agg(DISTINCT trait, '//' ORDER BY trait) AS trait FROM (
					WITH Variants AS (
					SELECT ga.source_id,
					v.variant_id,

					CASE WHEN v.source_id LIKE 'rs%' THEN v.source_id ELSE NULL END AS ref_snp_id,
					build_link_attribute(
					CASE WHEN length(v.metaseq_id) > 30 THEN substr(v.metaseq_id, 0, 27) 
					ELSE v.metaseq_id END, 
					'../variant/', v.record_pk, 
					CASE WHEN length(v.metaseq_id) > 30 THEN v.metaseq_id ELSE NULL END
					) || jsonb_build_object ('primary_key', v.record_pk) AS variant,

					CASE WHEN v.location_start < ga.location_start THEN build_text_attribute('upstream', NULL, 'red')::text
					WHEN v.location_start > ga.location_end THEN build_text_attribute('downstream', NULL, 'green')::text
					ELSE build_text_attribute('in gene', NULL, NULL)::text END AS relative_position,     

					CASE WHEN is_adsp_variant THEN build_icon_attribute(NULL, 'fa-check', 'red', NULL, 'true') ELSE NULL END AS adsp_variant_flag
					
					
					FROM CBIL.GeneAttributes ga, 
					(##WDK_ID_SQL##) ids,
					NIAGADS.Variant v

					WHERE ga.source_id = ids.source_id
					AND (SELECT find_bin_index(ga.chromosome, ga.location_start - @FLANKING_REGION@, ga.location_end + @FLANKING_REGION@)) @> v.bin_index
					AND numrange(ga.location_start - @FLANKING_REGION@, ga.location_end + @FLANKING_REGION@, '[]') @> v.position::NUMERIC)
					
					SELECT v.*,
					CASE WHEN ta.track LIKE 'NHGRI%' THEN 'NHGRI' ELSE 'NIAGADS' END AS source,
					
					to_char(r.pvalue_display::numeric, '9.99EEEE') as pvalue,
					r.allele,
					r.frequency,
					ot.name AS trait,
					build_link_attribute(r.evidence->>'PUBMEDID', '@PUBMED_URL@', null, null) AS pubmed_id,
					build_text_attribute(CASE WHEN LENGTH(r.evidence->>'STUDY') > 50 THEN LEFT(r.evidence->>'STUDY', 50) || ' ...' ELSE r.evidence->>'STUDY' END,
					CASE WHEN LENGTH(r.evidence->>'STUDY') > 50 THEN  r.evidence->>'STUDY' ELSE NULL END, NULL) AS study,
					evidence->>'INITIAL SAMPLE SIZE' AS sample,
					CASE WHEN evidence->>'REPLICATION SAMPLE SIZE' = 'NA' THEN NULL ELSE evidence->>'REPLICATION SAMPLE SIZE' END AS replicate_sample
					FROM
					
					Variants v,
					Results.VariantCatalog r,
					SRes.OntologyTerm ot,
					NIAGADS.TrackAttributes ta
					WHERE ta.track LIKE '%CATALOG%'
					AND ta.protocol_app_node_id = r.protocol_app_node_id
					AND ot.ontology_term_id = r.ontology_term_id
					AND (ot.name NOT ILIKE '%Alzh%' OR ot.name LIKE '%biomarker%' OR ot.name LIKE '%measurement%')
					AND r.variant_id = v.variant_id 
					
					ORDER BY
					r.neg_log10_pvalue DESC) a
					GROUP BY  source_id, variant_id, ref_snp_id, variant, relative_position, adsp_variant_flag, source, pvalue, allele, frequency,
					pubmed_id, study, sample, replicate_sample
				]]>
			</sql>
		</sqlQuery>


		<!-- =============================================================== -->
		<!-- Functional Genomics -->
		<!-- =============================================================== -->



		<!-- =============================================================== -->
		<!-- Functional Annotation -->
		<!-- =============================================================== -->

		<sqlQuery name="GoTerms">
			<column name="source_id"/>
			<column name="ontology"/>
			<column name="go_accession"/>
			<column name="term"/>
			<column name="go_evidence_code"/>
			<column name="evidence_table_dropdown"/>
			<sql>
				<![CDATA[
					SELECT source_id,
					ontology,
					go_evidence_code,
					replace(go_accession::text, '+AMIGO_URL+', '@AMIGO_URL@')::jsonb AS go_accession,
					term,
					multi_replace(evidence_table_dropdown::text, ARRAY['+PUBMED_URL+', '+REACTOME_PATHWAY_URL+', '+DOI_URL+'], ARRAY['@PUBMED_URL@', '@REACTOME_PATHWAY_URL@', '@DOI_URL@'])::jsonb AS evidence_table_dropdown
					FROM CBIL.GoAssociationEvidence
					ORDER BY ontology, term->>'value'
       			 ]]>
			</sql>
		</sqlQuery>

		<sqlQuery name="Pathways">
			<column name="source_id"/>
			<column name="source"/>
			<column name="accession"/>
			<column name="pathway_name"/>
			<column name="pathway_image"/>
			<sql>
				<![CDATA[
					SELECT ga.source_id,
					'@PROJECT_ID@'::text AS project_id,
					p.name AS pathway_name, 
					build_link_attribute(p.source_id, '@KEGG_PATHWAY_URL@', null, null) AS accession,
					'KEGG'::text AS source,
					CASE WHEN ga.annotation->'entrez_id' IS NULL THEN NULL
					ELSE 
					build_link_attribute('thumbnail pathway image for: ' || p.source_id, '@KEGG_COLORED_BY_GENE_IMG_URL@',p.source_id || '.png+' || (ga.annotation->>'entrez_id')::text, 'click to view gene highlighted in the pathway on the KEGG website') 
					|| '{"type":"thumbnail_link"}'::jsonb || ('{"img_url":"' || '@KEGG_IMG_URL@' || p.source_id || '.png"}')::jsonb 
					END AS pathway_image

					FROM
					SRes.Pathway p,
					SRes.PathwayNode pn,
					CBIL.GeneAttributes ga,
					(##WDK_ID_SQL##) id
					WHERE id.source_id = ga.source_id
					AND ga.gene_id = pn.row_id
					AND p.pathway_id = pn.pathway_id
					AND p.external_database_release_id = (SELECT external_database_release_id FROM SRes.ExternalDatabaseRelease r WHERE id_type = 'KEGG')

					UNION ALL 

					SELECT ga.source_id,
					'@PROJECT_ID@'::text AS project_id,
					p.name AS pathway_name, 
					build_link_attribute(p.source_id, '@REACTOME_PATHWAY_URL@', null, null) AS accession,
					'Reactome'::text AS source,
					NULL AS pathway_image

					FROM
					SRes.Pathway p,
					SRes.PathwayNode pn,
					CBIL.GeneAttributes ga,
					(##WDK_ID_SQL##) id
					WHERE id.source_id = ga.source_id
					AND ga.gene_id = pn.row_id
					AND p.pathway_id = pn.pathway_id
					AND p.external_database_release_id = (SELECT external_database_release_id FROM SRes.ExternalDatabaseRelease r WHERE id_type = 'REACTOME')
				]]>
			</sql>
		</sqlQuery>
	</querySet>
</wdkModel>
