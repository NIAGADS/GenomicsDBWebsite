<?xml version="1.0" encoding="UTF-8"?>
<wdkModel>
	<querySet name="VariantTables" 
		queryType="table" 
		isCacheable="false">

		<!-- =============================================================== -->
		<!-- Genetic Variation -->
		<!-- =============================================================== -->
		<sqlQuery name="LocusZoomGwasDatasets">
				<column name="project_id"/>
				<column name="source_id"/>
				<column name="dataset_list"/>
				<sql>
					<![CDATA[
						WITH dtemp AS (
							SELECT DISTINCT v.record_pk AS source_id, pan.source_id AS dataset_source_id,
							jsonb_build_object(pan.source_id, split_part(pan.source_id, '_', 1) || ': ' || pan.name) AS djson
							--jsonb_agg(DISTINCT  jsonb_build_object(pan.source_id, split_part(pan.source_id, '_', 1) || ': ' || pan.name) ORDER BY pan.source_id) AS dataset_json
							FROM Niagads.Variant v,
							Study.ProtocolAppNode pan,
							Results.VariantGWAS g
							WHERE v.record_pk = (##WDK_ID_SQL##)
							AND g.variant_id = v.variant_id
							AND pan.protocol_app_node_id = g.protocol_app_node_id
						),

						datasets AS (
						SELECT source_id,
							jsonb_agg(djson ORDER BY dataset_source_id) AS dataset_json
						FROM dtemp
						GROUP BY source_id)
						
						SELECT id.source_id,
						'@PROJECT_ID@'::text AS project_id,
						dataset_json AS dataset_list
						FROM (##WDK_ID_SQL##) id 
						LEFT OUTER JOIN datasets
						ON id.source_id = datasets.source_id
					]]>
				</sql>
			</sqlQuery>


		<sqlQuery name="Linkage">
			<column name="source_id"/>
			<column name="variant"/>
			<column name="ref_snp_id"/>
			<column name="adsp_variant_flag"/>
			<column name="distance"/>
			<column name="r_squared"/>
			<column name="d_prime"/>
			<column name="population"/>
			<column name="minor_allele_frequency"/>
			<column name="minor_allele_frequency_ld_ref"/>
			<column name="is_annotated_flag"/>

			<sql>
				<![CDATA[
						WITH variant AS (
						SELECT id.source_id, v.variant_id, v.chromosome, v.metaseq_id
						FROM Niagads.Variant v,
						(##WDK_ID_SQL##) id
						WHERE id.source_id = v.record_pk),

						LDResult AS (
						SELECT v.source_id,  
						r.distance,
						r.r_squared,
						r.d_prime,
						CASE WHEN v.variant_id = r.variants[1] THEN r.minor_allele_frequency[1] ELSE minor_allele_frequency[2] END AS minor_allele_frequency_ld_ref,
						CASE WHEN v.variant_id = r.variants[1] THEN r.minor_allele_frequency[2] ELSE minor_allele_frequency[1] END AS minor_allele_frequency,
						CASE WHEN v.variant_id = r.variants[1] THEN r.variants[2] ELSE r.variants[1] END AS linked_variant_id,
						ot.name AS population
						FROM Results.VariantLD r,
						Variant v,
						Study.ProtocolAppNode pan,
						Study.Characteristic c,
						SRes.OntologyTerm ot
						WHERE ARRAY[v.variant_id::integer] <@ r.variants
						AND r.chromosome = v.chromosome
						AND pan.protocol_app_node_id = r.protocol_app_node_id
						AND pan.protocol_app_node_id = c.protocol_app_node_id
						AND c.ontology_term_id = ot.ontology_term_id),

						LinkedVariants AS (
						SELECT v.variant_id,
						CASE WHEN v.source_id LIKE 'rs%' THEN v.source_id ELSE NULL END AS ref_snp_id,
						build_link_attribute(
						CASE WHEN length(v.metaseq_id) > 30 THEN substr(v.metaseq_id, 0, 27) 
						ELSE v.metaseq_id END, '../variant/', v.record_pk, 
						CASE WHEN length(v.metaseq_id) > 30 THEN v.metaseq_id ELSE NULL END) || jsonb_build_object ('primary_key', v.record_pk) AS variant,
						CASE WHEN is_adsp_variant THEN build_icon_attribute(NULL, 'fa-check', 'red', NULL, 'true') ELSE NULL END AS adsp_variant_flag,
						v.is_annotated_flag
						FROM NIAGADS.Variant v
						WHERE variant_id = ANY(ARRAY(SELECT DISTINCT linked_variant_id FROM LDResult)))

						SELECT r.source_id, r.distance, r.r_squared, r.d_prime, r.population,

						CASE WHEN r.minor_allele_frequency_ld_ref < 0.001 AND r.minor_allele_frequency_ld_ref > 0 THEN to_char(r.minor_allele_frequency_ld_ref, '9.9EEEE')
						WHEN r.minor_allele_frequency_ld_ref = 0 THEN 0::text
						ELSE round(r.minor_allele_frequency_ld_ref::numeric, 3)::text END AS minor_allele_frequency_ld_ref,

						CASE WHEN r.minor_allele_frequency < 0.001 AND r.minor_allele_frequency > 0 THEN to_char(r.minor_allele_frequency, '9.9EEEE')
						WHEN r.minor_allele_frequency = 0 THEN 0::text
						ELSE round(r.minor_allele_frequency::numeric, 3)::text END AS minor_allele_frequency,

						v.variant, v.ref_snp_id, v.adsp_variant_flag, v.is_annotated_flag

						FROM LinkedVariants v,
						LDResult r
						WHERE v.variant_id = r.linked_variant_id
						ORDER BY r.population, r.r_squared DESC
				]]>
			</sql>
		</sqlQuery>

		<sqlQuery name="AlleleFrequency">
			<column name="project_id"/>
			<column name="source_id"/>
			<column name="ethnicity"/>
			<column name="population_abbrev"/>
			<column name="population_source"/>
			<column name="frequency"/>
			<column name="percent_frequency"/>

			<sql>
				<![CDATA[
						WITH Variant AS (
						SELECT id.source_id::text, v.variant_id
						FROM NIAGADS.Variant v,
						(##WDK_ID_SQL##) id
						WHERE id.source_id::text = v.record_pk)
						SELECT v.source_id, 
						vf.allele,
						split_part(c.value, '|', 1) AS population_abbrev,

						CASE WHEN array_length(string_to_array(c.value, '|'), 1)  = 3 THEN build_text_attribute(split_part(c.value, '|', 2), split_part(c.value, '|', 3), NULL)
						ELSE build_text_attribute(split_part(c.value, '|', 2), NULL, NULL) END AS ethnicity,

						CASE WHEN vf.frequency < 0.001 AND vf.frequency > 0 THEN to_char(vf.frequency, '9.9EEEE')
						WHEN vf.frequency = 0 THEN 0::text
						ELSE round(vf.frequency::numeric, 3)::text END AS frequency,

						CASE WHEN r.id_type = '1000Genomes' THEN r.id_type || ' ' || r.version ELSE r.id_type END AS population_source

						FROM Variant v,
						Results.VariantFrequency vf,
						Study.ProtocolAppNode pan,
						Study.Characteristic c, 
						SRes.ExternalDatabaseRelease r
						WHERE vf.variant_id = v.variant_id
						AND vf.protocol_app_node_id = pan.protocol_app_node_id
						AND c.protocol_app_node_id = pan.protocol_app_node_id
						AND r.external_database_release_id = pan.external_database_release_id
						ORDER BY population_source, population_abbrev
				]]>
			</sql>
		</sqlQuery>

		<sqlQuery name="ADAssociationsFromGWAS">
			<column name="source_id"/>
			<column name="allele"/>
			<column name="track_name"/>
			<column name="pvalue"/>
			<column name="accession_link"/>

			<sql>
				<![CDATA[
						WITH Variant AS (
						SELECT id.source_id::text, v.variant_id
						FROM NIAGADS.Variant v,
						(##WDK_ID_SQL##) id
						WHERE id.source_id = v.record_pk),

--  build_link_attribute(display_value TEXT, url TEXT, url_parameter TEXT DEFAULT NULL, tooltip TEXT DEFAULT NULL)

						Tracks AS (
						SELECT  DISTINCT t.protocol_app_node_id, 
						build_link_attribute(t.name, '/record/gwas_summary/', t.track, t.description) AS track_name,
						build_link_attribute(da.accession, '/record/dataset/', NULL, 'view accession details') AS accession_link
						FROM NIAGADS.TrackAttributes t,
						NIAGADS.DatasetAttributes da,
						Study.Characteristic c,
						SRes.OntologyTerm ot,
						SRes.OntologyTerm qot
						WHERE t.dataset_accession = da.accession
						AND subcategory = 'GWAS summary statistics'
						AND dataset_accession NOT LIKE '%CATALOG%'
						AND c.protocol_app_node_id = t.protocol_app_node_id
						AND c.ontology_term_id = ot.ontology_term_id
						AND ot.name ILIKE '%Alzh%'
						AND qot.ontology_term_id = c.qualifier_id
						AND qot.name = 'diagnosis')
								
						SELECT v.source_id,
						t.*,
						r.allele,
						to_char(r.pvalue_display::numeric, '9.99EEEE') as pvalue
						FROM Variant v,
						Results.VariantGWAS r,
						Tracks t
						WHERE r.variant_id = v.variant_id
						AND t.protocol_app_node_id = r.protocol_app_node_id
						AND r.neg_log10_pvalue > 3
						ORDER BY neg_log10_pvalue DESC
				]]>
			</sql>
		</sqlQuery>

		<sqlQuery name="OtherAssociationsFromGWAS">
			<column name="source_id"/>
			<column name="allele"/>
			<column name="track_name"/>
			<column name="pvalue"/>
			<column name="accession_link"/>

			<sql>
				<![CDATA[
						WITH Variant AS (
						SELECT id.source_id::text, v.variant_id
						FROM NIAGADS.Variant v,
						(##WDK_ID_SQL##) id
						WHERE id.source_id = v.record_pk),

						Tracks AS (
						SELECT  DISTINCT t.protocol_app_node_id, 
						build_link_attribute(t.name, '/record/gwas_summary/', t.track, t.description) AS track_name,
						build_link_attribute(da.accession, '/record/dataset/', NULL, 'view accession details') AS accession_link
						FROM NIAGADS.TrackAttributes t,
						NIAGADS.DatasetAttributes da,
						Study.Characteristic c,
						SRes.OntologyTerm ot,
						SRes.OntologyTerm qot
						WHERE t.dataset_accession = da.accession
						AND subcategory = 'GWAS summary statistics'
						AND dataset_accession NOT LIKE '%CATALOG%'
						AND c.protocol_app_node_id = t.protocol_app_node_id
						AND c.ontology_term_id = ot.ontology_term_id
						AND ot.name NOT ILIKE '%Alzh%'
						AND qot.ontology_term_id = c.qualifier_id
						AND qot.name = 'diagnosis')
								
						SELECT v.source_id,
						t.*,
						r.allele,
						to_char(r.pvalue_display::numeric, '9.99EEEE') as pvalue
						FROM Variant v,
						Results.VariantGWAS r,
						Tracks t
						WHERE r.variant_id = v.variant_id
						AND t.protocol_app_node_id = r.protocol_app_node_id
						AND r.neg_log10_pvalue > 3
						ORDER BY neg_log10_pvalue DESC
				]]>
			</sql>
		</sqlQuery>

		<sqlQuery name="ADAssociationsFromCatalog">
			<column name="source_id"/>
			<column name="project_id"/>

			<column name="allele"/>
			<column name="frequency"/>


			<column name="track_name"/>
			<column name="pvalue"/>

			<column name="source"/>
			<column name="pubmed_id"/>
			<column name="study"/>
			<column name="sample"/>
			<column name="replicate_sample"/>
			<column name="trait"/>

			<sql>
				<![CDATA[
						SELECT source_id, source, pvalue, allele, frequency,
						pubmed_id, study, sample, replicate_sample,  string_agg(DISTINCT trait, '//' ORDER BY trait) AS trait FROM (
						WITH Variant AS (
						SELECT id.source_id::text, v.variant_id
						FROM NIAGADS.Variant v,
						(##WDK_ID_SQL##) id
						WHERE id.source_id = v.record_pk)
							
						SELECT v.source_id,
						CASE WHEN ta.track LIKE 'NHGRI%' THEN 'NHGRI' ELSE 'NIAGADS' END AS source,	
						to_char(r.pvalue_display::numeric, '9.99EEEE') as pvalue,
						r.allele,
						r.frequency,
						ot.name AS trait,
						build_link_attribute(r.evidence->>'PUBMEDID', '@PUBMED_URL@', null, null) AS pubmed_id,
						build_text_attribute(CASE WHEN LENGTH(r.evidence->>'STUDY') > 50 THEN LEFT(r.evidence->>'STUDY', 50) || ' ...' ELSE r.evidence->>'STUDY' END,
						CASE WHEN LENGTH(r.evidence->>'STUDY') > 50 THEN  r.evidence->>'STUDY' ELSE NULL END, NULL) AS study,
						evidence->>'INITIAL SAMPLE SIZE' AS sample,
						CASE WHEN evidence->>'REPLICATION SAMPLE SIZE' = 'NA' THEN NULL ELSE evidence->>'REPLICATION SAMPLE SIZE' END AS replicate_sample

						FROM Variant v,
						Results.VariantCatalog r,
						SRes.OntologyTerm ot,
						NIAGADS.TrackAttributes ta

						WHERE ta.track LIKE '%CATALOG%'
						AND ta.protocol_app_node_id = r.protocol_app_node_id
						AND ot.ontology_term_id = r.ontology_term_id
						AND (ot.name ILIKE '%Alzh%' AND ot.name NOT LIKE '%biomarker%' AND ot.name NOT LIKE '%measurement%')
						AND r.variant_id = v.variant_id 

						ORDER BY r.neg_log10_pvalue DESC) a
						GROUP BY  source_id, source, pvalue, allele, frequency, pubmed_id, study, sample, replicate_sample
				]]>
			</sql>
		</sqlQuery>

		<sqlQuery name="OtherAssociationsFromCatalog">
			<column name="source_id"/>
			<column name="project_id"/>

			<column name="allele"/>
			<column name="frequency"/>

			<column name="track_name"/>
			<column name="pvalue"/>

			<column name="source"/>
			<column name="pubmed_id"/>
			<column name="study"/>
			<column name="sample"/>
			<column name="replicate_sample"/>
			<column name="trait"/>

			<sql>
				<![CDATA[
						SELECT source_id, source, pvalue, allele, frequency,
						pubmed_id, study, sample, replicate_sample,  string_agg(DISTINCT trait, '//' ORDER BY trait) AS trait FROM (
						WITH Variant AS (
						SELECT id.source_id::text, v.variant_id
						FROM NIAGADS.Variant v,
						(##WDK_ID_SQL##) id
						WHERE id.source_id = v.record_pk)
							
						SELECT v.source_id,
						CASE WHEN ta.track LIKE 'NHGRI%' THEN 'NHGRI' ELSE 'NIAGADS' END AS source,	
						to_char(r.pvalue_display::numeric, '9.99EEEE') as pvalue,
						r.allele,
						r.frequency,
						ot.name AS trait,
						build_link_attribute(r.evidence->>'PUBMEDID', '@PUBMED_URL@', null, null) AS pubmed_id,
						build_text_attribute(CASE WHEN LENGTH(r.evidence->>'STUDY') > 50 THEN LEFT(r.evidence->>'STUDY', 50) || ' ...' ELSE r.evidence->>'STUDY' END,
						CASE WHEN LENGTH(r.evidence->>'STUDY') > 50 THEN  r.evidence->>'STUDY' ELSE NULL END, NULL) AS study,
						evidence->>'INITIAL SAMPLE SIZE' AS sample,
						CASE WHEN evidence->>'REPLICATION SAMPLE SIZE' = 'NA' THEN NULL ELSE evidence->>'REPLICATION SAMPLE SIZE' END AS replicate_sample

						FROM Variant v,
						Results.VariantCatalog r,
						SRes.OntologyTerm ot,
						NIAGADS.TrackAttributes ta

						WHERE ta.track LIKE '%CATALOG%'
						AND ta.protocol_app_node_id = r.protocol_app_node_id
						AND ot.ontology_term_id = r.ontology_term_id
						AND (ot.name NOT ILIKE '%Alzh%' OR ot.name LIKE '%biomarker%' OR ot.name LIKE '%measurement%')
						AND r.variant_id = v.variant_id 

						ORDER BY r.neg_log10_pvalue DESC) a
						GROUP BY  source_id, source, pvalue, allele, frequency, pubmed_id, study, sample, replicate_sample
				]]>
			</sql>
		</sqlQuery>

		<!-- =============================================================== -->
		<!-- Variant Classification and Effect -->
		<!-- =============================================================== -->
		<sqlQuery name="TranscriptConsequences">
			<column name="source_id"/>
			<column name="rank"/>
			<column name="exon"/>
			<column name="impact"/>
			<column name="strand"/>
			<column name="is_canonical_transcript"/>
			<column name="gene_link"/>
			<column name="transcript_link"/>
			<column name="protein_link"/>
			<column name="distance"/>
			<column name="consequence"/>
			<column name="amino_acid_change"/>
			<column name="codon_change"/>
			<column name="is_coding"/>
			<column name="cds_position"/>
			<column name="cdna_position"/>
			<column name="protein_position"/>
			<sql>
				<![CDATA[
						WITH vEffect AS (
							SELECT id.source_id, jsonb_array_elements(ve.transcript_consequences) AS conseq
							FROM (##WDK_ID_SQL##) id,
							Results.VariantEffect ve,
							NIAGADS.Variant v 
							WHERE id.source_id = v.record_pk 
							AND  ve.variant_id = v.variant_id
						)

						SELECT source_id,
						conseq->>'rank' AS rank,
						conseq->>'exon' AS exon,
						conseq->>'impact' AS impact,
						CASE WHEN (conseq->>'strand')::int = 1 THEN '+' ELSE '-' END AS strand,
						CASE WHEN (conseq->>'canonical')::int = 1 THEN 'Y' ELSE NULL END AS is_canonical_transcript,
						build_link_attribute(conseq->>'gene_symbol', '/record/gene/', conseq->>'gene_id', 'view gene details') AS gene_link,
						build_link_attribute(conseq->>'transcript_id', CASE WHEN '@PROJECT_ID@' = 'GRCh37' THEN '@ENSEMBL_TRANSCRIPT_URL_GRCh37@' ELSE '@ENSEMBL_TRANSCRIPT_URL_GRCh38@' END, 
						NULL, 'view transcript details from Ensembl' || CASE WHEN '@PROJECT_ID@' = 'GRCh37' THEN ' @PROJECT_ID@ Archive' ELSE '' END) AS transcript_link,
						build_link_attribute(conseq->>'protein_id', CASE WHEN '@PROJECT_ID@' = 'GRCh37' THEN '@ENSEMBL_PROTEIN_URL_GRCh37@' ELSE '@ENSEMBL_PROTEIN_URL_GRCh38@' END, 
						NULL, 'view protein details from Ensembl' || CASE WHEN '@PROJECT_ID@' = 'GRCh37' THEN ' @PROJECT_ID@ Archive' ELSE '' END) AS protein_link,
						conseq->>'distance' AS distance,
						multi_replace(conseq->>'consequence_terms', ARRAY[']', '[', '_', ', ', '"'], ARRAY['', '', ' ', ' & ', '']) AS consequence,
						conseq->>'amino_acids' AS amino_acid_change,
						conseq->>'codons' AS codon_change,
						CASE WHEN (conseq->>'is_coding')::boolean THEN build_icon_attribute(NULL, 'fa-check', 'green', NULL, 'true') ELSE NULL END AS is_coding,
						CASE WHEN conseq->>'cds_start' = conseq->>'cds_end' THEN conseq->>'cds_start' ELSE (conseq->>'cds_start')::text || '-' || (conseq->>'cds_end')::text END AS cds_position,
						CASE WHEN conseq->>'cdna_start' = conseq->>'cdna_end' THEN conseq->>'cdna_start' ELSE (conseq->>'cdna_start')::text || '-' || (conseq->>'cdna_end')::text END AS cdna_position,
						CASE WHEN conseq->>'protein_start' = conseq->>'protein_end' THEN conseq->>'protein_start' ELSE (conseq->>'protein_start')::text || '-' || (conseq->>'cdna_end')::text END AS protein_position
						FROM vEffect
						ORDER BY (conseq->>'rank')::int, conseq->>'gene_id'
				]]>
			</sql>
		</sqlQuery>


		<sqlQuery name="RegulatoryConsequences">
			<column name="source_id"/>
			<column name="rank"/>
			<column name="feature_biotype"/>
			<column name="feature_link"/>	
			<column name="consequence"/>
			<column name="impact"/>
			<sql>
				<![CDATA[
						WITH vEffect AS (
							SELECT id.source_id, jsonb_array_elements(ve.regulatory_feature_consequences) AS conseq
							FROM (##WDK_ID_SQL##) id,
							Results.VariantEffect ve,
							NIAGADS.Variant v 
							WHERE id.source_id = v.record_pk 
							AND  ve.variant_id = v.variant_id
						)

						SELECT source_id,
						conseq->>'rank' AS rank,
						conseq->>'impact' AS impact,
						replace(conseq->>'biotype','_', ' ') AS feature_biotype,
						build_link_attribute(conseq->>'regulatory_feature_id', CASE WHEN '@PROJECT_ID@' = 'GRCh37' THEN '@ENSEMBL_REGULATORY_FEATURE_URL_GRCh37@' ELSE '@ENSEMBL_REGULATORY_FEATURE_URL_GRCh38@' END, 
						NULL, 'view feature details from Ensembl' || CASE WHEN '@PROJECT_ID@' = 'GRCh37' THEN ' @PROJECT_ID@ Archive' ELSE '' END) AS feature_link,
						multi_replace(conseq->>'consequence_terms', ARRAY[']', '[', '_', ', ', '"'], ARRAY['', '', ' ', ' & ', '']) AS consequence	
						FROM vEffect
						ORDER BY (conseq->>'rank')::int
				]]>
			</sql>
		</sqlQuery>


	</querySet>
</wdkModel>
