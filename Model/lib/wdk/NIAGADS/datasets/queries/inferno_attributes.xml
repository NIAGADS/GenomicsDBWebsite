<?xml version="1.0" encoding="UTF-8"?>
<wdkModel>

    <querySet name="InfernoTables" queryType="table" isCacheable="false">

        <defaultTestParamValues>
            <paramValue name="dataset_id">NG00027</paramValue>
        </defaultTestParamValues>

        <testRowCountSql>
      select count(*) from NIAGADS.ResourceAttributes
        </testRowCountSql>

        <!-- =============================================================== -->
        <!-- INFERNO Genetic Variation  -->
        <!-- =============================================================== -->

        <sqlQuery name="ExpandedSNPs">
            <column name="track"/>
            <column name="project_id"/>
            <column name="variant"/>
            <column name="refsnp_id" />
            <column name="is_adsp_variant" />
            <column name="most_severe_consequence"/>
            <column name="msc_impact" />
            <column name="msc_is_coding" />
            <column name="tag_id" />

            <column name="tag_refsnp" />
            <column name="tag_maf" />
            <column name="tag_rsquared" />
            <column name="tag_distance" />

            <column name="is_expanded"/>

            <sql>
                <![CDATA[
                        WITH dataset AS (##WDK_ID_SQL##),

                        GwasVariants AS (
                        SELECT mv.*    
                        FROM INFERNO.MappedVariants mv,
                        Study.ProtocolAppNode pan,
                        Results.VariantGWAS r,
                        dataset d
                        WHERE pan.source_id = mv.dataset
                        AND pan.protocol_app_node_id = r.protocol_app_node_id
                        AND r.variant_id = mv.variant_id
                        AND mv.dataset = d.track)

                        SELECT 
                        dataset AS track
                        , '@PROJECT_ID@'::text AS project_id
                        , split_part(record_pk, ':', 1)::integer AS chr
                        , split_part(record_pk, ':', 2)::integer AS pos
                        , NULL AS is_expanded
                        , build_link_attribute(display_metaseq_id, '../variant/', record_pk) AS variant
                        , refsnp_id
                        , is_adsp_variant
                        , most_severe_consequence
                        , msc_impact
                        , msc_is_coding
                        , tag_id
                        , tag_refsnp
                        , tag_maf
                        , tag_rsquared
                        , tag_distance
                        FROM GwasVariants

                        UNION ALL

                        SELECT 
                        dataset AS track
                        , '@PROJECT_ID@'::text AS project_id
                        , split_part(record_pk, ':', 1)::integer AS chr
                        , split_part(record_pk, ':', 2)::integer AS pos
                        , build_icon_attribute('Expanded', 'fa-check', 'green', NULL, 'true') AS is_expanded
                        , build_link_attribute(display_metaseq_id, '../variant/', record_pk) AS variant
                        , refsnp_id
                        , is_adsp_variant
                        , most_severe_consequence
                        , msc_impact
                        , msc_is_coding
                        , tag_id
                        , tag_refsnp
                        , tag_maf
                        , tag_rsquared
                        , tag_distance
                        FROM INFERNO.MappedVariants mv, dataset d
                        WHERE mv.dataset = d.track 
                        AND record_pk NOT IN (SELECT record_pk FROM GwasVariants)    

                        ORDER BY chr, pos   
                    ]]>
            </sql>
        </sqlQuery>


        <!-- =============================================================== -->
        <!-- INFERNO Tags  -->
        <!-- =============================================================== -->

        <sqlQuery name="TagIdeogram">
            <column name="track"/>
            <column name="project_id"/>
            <column name="data"/>
            <column name="annotation_tracks"/>

            <sql>
                <![CDATA[
                WITH dataset AS (##WDK_ID_SQL##),

                tags AS (
                    SELECT DISTINCT
                        dataset AS track ,
                        tag_id ,
                        REPLACE(chromosome, 'chr', '')::INTEGER AS chromosome,
                        tag_pos
                    FROM
                        INFERNO.Tags t,
                        dataset d
                    WHERE
                        t.dataset = d.track
                )

                SELECT
                    * ,
                    '@PROJECT_ID@'::text AS project_id ,
                    '[' || jsonb_build_object('id', 'tagTrack', 'displayName', 'Tag Regions', 'color', 'red',
                    'shape', 'triangle' )::text ||']' AS annotation_tracks
                FROM
                    (
                        SELECT
                            track ,
                            jsonb_build_object('annots', json_agg(chr_json), 'keys', array_to_json(array['name',
                            'start','length','trackIndex'])) AS data
                        FROM
                            (
                                SELECT
                                    track,
                                    jsonb_build_object('chr', chromosome::text, 'annots', jsonb_agg(annots)) AS
                                    chr_json
                                FROM
                                    (
                                        SELECT
                                            track,
                                            chromosome,
                                            jsonb_build_array(tag_id, tag_pos, 0, 0) AS annots
                                        FROM
                                            tags) a
                                GROUP BY
                                    track,
                                    chromosome
                                ORDER BY
                                    chromosome) b
                        GROUP BY
                            track) c
                    ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="Tags">
            <column name="track"/>
            <column name="project_id"/>
            <column name="tag_id"/>
            <column name="tag_location"/>
            <column name="tag_span"/>
            <column name="tag_rsid"/>
            <sql>
                <![CDATA[
                    WITH dataset AS (##WDK_ID_SQL##),
       
                    tags AS (
                    SELECT DISTINCT 
                    dataset AS track
                    , tag_id
                    , chromosome
                    , replace(chromosome, 'chr', '')::integer AS chr_num

                    , tag_pos
                    , tag_rsid --, build_link_attribute(tag_rsid, '../variant/', tag_rsid) AS tag_rsid
                    FROM INFERNO.Tags, dataset
                    WHERE tags.dataset = dataset.track
                    ORDER BY chr_num, tag_pos,tag_id
                    )

                    SELECT
                    track
                    , '@PROJECT_ID@'::text AS project_id
                    , tag_id
                    , CASE WHEN min(tag_pos) = max(tag_pos) 
                      THEN replace(chromosome, 'chr', '') || ':' || min(tag_pos)::text 
                      ELSE replace(chromosome, 'chr', '') || ':' || min(tag_pos)::text || '-' || max(tag_pos) END AS tag_location
                    , CASE WHEN min(tag_pos) = max(tag_pos) 
                      THEN 1::text
                      ELSE to_char(max(tag_pos) - min(tag_pos), '999G999') END AS tag_span
                    , string_agg(tag_rsid, '//') AS tag_rsid --, jsonb_agg(tag_rsid) AS tag_rsid -- jsonb_agg(tag_rsid)  AS tag_rsid
                    FROM tags
                    GROUP BY track, tag_id, chromosome
                ]]>
            </sql>
        </sqlQuery>

        <!-- =============================================================== -->
        <!-- INFERNO Tags  -->
        <!-- =============================================================== -->

        <sqlQuery name="GenomicPartitions">
            <column name="track"/>
            <column name="project_id"/>
            <column name="variant"/>
            <column name="tag_id"/>
            <column name="chromosome"/>
            <column name="hit_type"/>
            <column name="component"/>
            <column name="feature_name"/>
            <column name="span_start"/>
            <column name="span_end"/>
            <sql>
                <![CDATA[
                            SELECT 
                            dataset AS track
                            , '@PROJECT_ID@'::text AS project_id, build_link_attribute(split_part(record_pk, '_', 1), '../variant/', record_pk) AS variant
                            , chr AS chromosome
                            , split_part(record_pk, ':', 1)::integer AS chr_num
                            , span_start
                            , span_end
                            , tag_id
                            , hit_type
                            , component
                            , CASE WHEN feature_name LIKE '%;%' THEN build_text_attribute(feature_name, NULL, NULL)
                            WHEN feature_name LIKE 'lnc-%' THEN build_link_attribute(feature_name, '../gene/', split_part(feature_name, '-', 2), 'view details for gene: ' || split_part(feature_name, '-', 2))
                            ELSE build_link_attribute(feature_name, '../gene/') END AS feature_name
                            FROM INFERNO.MappedGenomicPartitions
                ]]>
            </sql>
        </sqlQuery>


        <sqlQuery name="GeneMapping">
            <column name="track"/>
            <column name="project_id"/>
            <column name="chart"/>
            <sql><![CDATA[
                        WITH dataset AS (##WDK_ID_SQL##),

                        hits AS (SELECT g.dataset, record_pk, chr, hit_type, 
                        CASE WHEN hit_type = 'REPEAT' THEN 'repeat' ELSE component END AS hit, 
                        int8range(span_start, span_end, '(]') AS span,
                        replace(chr, 'chr', '') || '@' || feature_name AS feature_name
                        FROM INFERNO.MappedGenomicPartitions g, dataset WHERE g.dataset= dataset.track),

                        mRNA_gene_hit_counts AS (
                        SELECT COUNT (DISTINCT record_pk) AS num_variants, dataset, hit, feature_name
                        FROM hits WHERE (hit_type = 'mRNA') AND feature_name NOT LIKE '%;%' GROUP BY dataset, hit, feature_name),

                        mRNA_gene_hits_by_category_counts AS (
                        SELECT dataset, replace(feature_name, 'lnc-', '') AS feature_name,
                                SUM(num_variants) FILTER (WHERE hit = 'exon')  AS exon,
                                SUM(num_variants) FILTER (WHERE hit = 'intron')  AS intron,
                                SUM(num_variants) FILTER (WHERE hit = 'promoter')  AS promoter,
                                SUM(num_variants) FILTER (WHERE hit = '5utr_exon')  AS five_utr_exon,
                                SUM(num_variants) FILTER (WHERE hit = '5utr_intron')  AS five_utr_intron,
                                SUM(num_variants) FILTER (WHERE hit = '3utr_exon')  AS three_utr_exon,
                                SUM(num_variants) FILTER (WHERE hit = '3utr_intron')  AS three_utr_intron
                        FROM mRNA_gene_hit_counts GROUP BY dataset, feature_name),

                        mRNA_gene_series_json AS (
                        SELECT dataset, 
                        jsonb_agg(split_part(feature_name, '@', 2) ORDER BY split_part(feature_name, '@', 1)::integer, split_part(feature_name, '@', 2)) AS categories,
                        jsonb_agg(exon ORDER BY split_part(feature_name, '@', 1)::integer, split_part(feature_name, '@', 2)) AS exon_counts,
                        jsonb_agg(intron ORDER BY split_part(feature_name, '@', 1)::integer, split_part(feature_name, '@', 2)) AS intron_counts,
                        jsonb_agg(promoter ORDER BY split_part(feature_name, '@', 1)::integer, split_part(feature_name, '@', 2)) AS promoter_counts,
                        jsonb_agg(five_utr_exon ORDER BY split_part(feature_name, '@', 1)::integer, split_part(feature_name, '@', 2)) AS five_utr_exon_counts,
                        jsonb_agg(five_utr_intron ORDER BY split_part(feature_name, '@', 1)::integer, split_part(feature_name, '@', 2)) AS five_utr_intron_counts,
                        jsonb_agg(three_utr_exon ORDER BY split_part(feature_name, '@', 1)::integer, split_part(feature_name, '@', 2)) AS three_utr_exon_counts,
                        jsonb_agg(three_utr_intron ORDER BY split_part(feature_name, '@', 1)::integer, split_part(feature_name, '@', 2)) AS three_utr_intron_counts
                        FROM  mRNA_gene_hits_by_category_counts
                        GROUP BY dataset
                        )

                        SELECT dataset AS track, '@PROJECT_ID@'::text AS project_id,
                        replace(jsonb_build_object(
                                'chart', jsonb_build_object('type', 'column', 'width', 1000), 
                                'credits', jsonb_build_object('enabled', false),
                                'title', jsonb_build_object('text', 'N Variants per containing Gene region'),
                                'xAxis', jsonb_build_object('categories', categories, 'title', jsonb_build_object('text','Gene'),
                                                            'labels', jsonb_build_object('format', '<a href="../gene/{value}">{value}</a>')
                                                            ),
                                'yAxis', jsonb_build_object('min', 0, 'title', jsonb_build_object('text','N Variants')),
                                'legend', jsonb_build_object('reversed', false),
                                'plotOptions', jsonb_build_object('series', jsonb_build_object('stacking', 'normal')),
                                'series', jsonb_build_array(
                                        jsonb_build_object('name', 'exonic', 'data', exon_counts, 'tooltip', jsonb_build_object('headerFormat','<span style="font-size:11px;color:red">l{point.key}</span><br/>')),
                                        jsonb_build_object('name', 'intronic', 'data', intron_counts, 'tooltip', jsonb_build_object('headerFormat','<span style="font-size:11px;color:red">{point.key}</span><br/>')),
                                        jsonb_build_object('name', 'promoter', 'data', promoter_counts, 'tooltip', jsonb_build_object('headerFormat','<span style="font-size:11px;color:red">{point.key}</span><br/>')),   
                                        jsonb_build_object('name', '5''UTR exonic', 'data', five_utr_exon_counts, 'tooltip', jsonb_build_object('headerFormat','<span style="font-size:11px;color:red">{point.key}</span><br/>')),
                                        jsonb_build_object('name',  '5''UTR intronic', 'data', five_utr_intron_counts, 'tooltip', jsonb_build_object('headerFormat','<span style="font-size:11px;color:red">{point.key}</span><br/>')),
                                        jsonb_build_object('name', '3''UTR exonic', 'data', three_utr_exon_counts, 'tooltip', jsonb_build_object('headerFormat','<span style="font-size:11px;color:red">{point.key}</span><br/>')),
                                        jsonb_build_object('name', '3''UTR intronic', 'data', three_utr_intron_counts, 'tooltip', jsonb_build_object('headerFormat','<span style="font-size:11px;color:red">{point.key}</span><br/>'))
                                        )
                                        
                            )::text, '\\', '\') AS chart     -- correct ` as jsonb will escape the \ to \\
                        FROM mRNA_gene_series_json
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="lncRNAMapping">
            <column name="track"/>
            <column name="project_id"/>
            <column name="charts"/>
            <sql>
                <![CDATA[              
                    WITH dataset AS (##WDK_ID_SQL##),

                    hits AS (SELECT g.dataset, record_pk, chr, hit_type, 
                    CASE WHEN hit_type = 'REPEAT' THEN 'repeat' ELSE component END AS hit, 
                    int8range(span_start, span_end, '(]') AS span,
                    replace(chr, 'chr', '') || '@' || feature_name AS feature_name
                    FROM INFERNO.MappedGenomicPartitions g, dataset WHERE g.dataset= dataset.track),

                    lncRNA_feature_hit_counts AS (
                    SELECT COUNT (DISTINCT record_pk) AS num_variants, dataset, hit, feature_name
                    FROM hits WHERE (hit_type = 'lncRNA') GROUP BY dataset, hit, feature_name),

                    lncRNA_feature_hits_by_category_counts AS (
                    SELECT dataset, replace(feature_name, 'lnc-', '') AS feature_name,
                            SUM(num_variants) FILTER (WHERE hit = 'lncRNA_exon')  AS exon,
                            SUM(num_variants) FILTER (WHERE hit = 'lncRNA_intron')  AS intron
                    FROM lncRNA_feature_hit_counts GROUP BY dataset, feature_name),

                    lncRNA_feature_series_json AS (
                    SELECT dataset, 
                    jsonb_agg(split_part(feature_name, '@', 2) ORDER BY split_part(feature_name, '@', 1)::integer, split_part(feature_name, '@', 2)) AS categories,
                    jsonb_agg(exon ORDER BY split_part(feature_name, '@', 1)::integer, split_part(feature_name, '@', 2)) AS exon_counts,
                    jsonb_agg(intron ORDER BY split_part(feature_name, '@', 1)::integer, split_part(feature_name, '@', 2)) AS intron_counts
                    FROM  lncRNA_feature_hits_by_category_counts
                    GROUP BY dataset
                    ),
                    
                    lncRNA_feature_plot AS (
                    SELECT dataset,
                    jsonb_build_object(
                            'chart', jsonb_build_object('type', 'column', 'width', 500), 
                            'credits', jsonb_build_object('enabled', false),
                            'title', jsonb_build_object('text', 'N Variants per containing lncRNA region'),
                            'xAxis', jsonb_build_object('categories', categories, 'title', jsonb_build_object('text','lncRNA ID')),
                            'yAxis', jsonb_build_object('min', 0, 'title', jsonb_build_object('text','N Variants')),
                            'legend', jsonb_build_object('reversed', true),
                            'plotOptions', jsonb_build_object('series', jsonb_build_object('stacking', 'normal')),
                            'series', jsonb_build_array(
                                    jsonb_build_object('name', 'exonic', 'data', exon_counts, 'tooltip', jsonb_build_object('headerFormat','<span style=''font-size:11px;color:red''>lnc-{point.key}</span><br/>')),
                                    jsonb_build_object('name', 'intronic', 'data', intron_counts, 'tooltip', jsonb_build_object('headerFormat','<span style=''font-size:11px;color:red''>lnc-{point.key}</span><br/>'))
                                    )
                                    
                        ) AS lncRNA_feature_chart_json     -- get the unicode character in the tooltip to be correct as jsonb will escape the \ to \\
                    FROM lncRNA_feature_series_json),

                    lncRNA_merged_hits AS (
                    SELECT  dataset, record_pk, array_agg(DISTINCT hit ORDER BY hit) AS hits, range_merge(span) 
                    FROM hits WHERE (hit_type = 'lncRNA' OR hit_type = 'REPEAT') GROUP BY dataset, record_pk),

                    lncRNA_hit_counts AS (
                    SELECT dataset, hits, COUNT(record_pk) AS num_variants
                    FROM lncRNA_merged_hits 
                    WHERE hits <> ARRAY['repeat'] GROUP BY dataset, hits),

                    lncRNA_hits_by_category_counts AS (
                    SELECT  dataset, 
                            SUM(num_variants) FILTER (WHERE hits @> ARRAY['lncRNA_exon'])  AS exon,
                            SUM(num_variants) FILTER (WHERE hits @> ARRAY['lncRNA_exon', 'repeat'])  AS exon_repeat,
                            SUM(num_variants) FILTER (WHERE hits @> ARRAY['lncRNA_intron'])  AS intron,
                            SUM(num_variants) FILTER (WHERE hits @> ARRAY['lncRNA_intron', 'repeat'])  AS intron_repeat
                    FROM lncRNA_hit_counts GROUP BY dataset),

                    lncRNA_plot AS (
                    SELECT dataset,
                    jsonb_build_object(
                            'chart', jsonb_build_object('type', 'bar', 'width', 500), 
                            'credits', jsonb_build_object('enabled', false),
                            'title', jsonb_build_object('text', 'N Variants contained within lncRNA regions'),
                            'xAxis', jsonb_build_object('categories', jsonb_build_array('lncRNA exon', 'lncRNA intron')),
                            'yAxis', jsonb_build_object('min', 0, 'title', jsonb_build_object('text','N Variants')),
                            'legend', jsonb_build_object('reversed', true),
                            'plotOptions', jsonb_build_object('series', jsonb_build_object('stacking', 'normal')),
                            'series', jsonb_build_array(
                                    jsonb_build_object('color', 'orange', 'name', 'Non-repeat regions', 'data', jsonb_build_array(exon, intron)),
                                    jsonb_build_object('color', '#476387','name', 'Repeat regions', 'data', jsonb_build_array(exon_repeat, intron_repeat)))
                    ) AS lncRNA_summary_chart_json     
                    FROM lncRNA_hits_by_category_counts)


                    SELECT f.dataset AS track, '@PROJECT_ID@'::text AS project_id,
                    jsonb_build_array(jsonb_build_object('name','summary', 'chart', p.lncRNA_summary_chart_json), 
                                      jsonb_build_object('name','feature', 'chart', f.lncRNA_feature_chart_json)) AS charts
                    FROM lncRNA_feature_plot f, lncRNA_plot p
                    WHERE f.dataset = p.dataset
                ]]>
            </sql>
        </sqlQuery>


        <sqlQuery name="mRNAMapping">
            <column name="track"/>
            <column name="project_id"/>
            <column name="charts"/>
            <sql>
                <![CDATA[    
                    WITH dataset AS (##WDK_ID_SQL##),

                    hits AS (SELECT g.dataset, record_pk, chr, hit_type, 
                    CASE WHEN hit_type = 'REPEAT' THEN 'repeat' ELSE component END AS hit, 
                    int8range(span_start, span_end, '(]') AS span,
                    replace(chr, 'chr', '') || '@' || feature_name AS feature_name
                    FROM INFERNO.MappedGenomicPartitions g, dataset WHERE g.dataset= dataset.track),

                    mRNA_merged_hits AS (
                    SELECT  dataset, record_pk, array_agg(DISTINCT hit ORDER BY hit) AS hits, range_merge(span) 
                    FROM hits WHERE (hit_type = 'mRNA' or hit_type = 'REPEAT' or hit_type = 'INTERGENIC') GROUP BY dataset, record_pk),

                    mRNA_hit_counts AS (
                    SELECT dataset, hits, COUNT(record_pk) AS num_variants
                    FROM mRNA_merged_hits GROUP BY dataset, hits),

                    mRNA_hits_by_category_counts AS (
                    SELECT  dataset,
                            SUM(num_variants) FILTER (WHERE hits @> ARRAY['intergenic'] OR hits = ARRAY['repeat'])  AS intergenic,
                            SUM(num_variants) FILTER (WHERE hits = ARRAY['repeat'])  AS intergenic_repeat,
                            SUM(num_variants) FILTER (WHERE hits @> ARRAY['exon'])  AS exon,
                            SUM(num_variants) FILTER (WHERE hits @> ARRAY['exon', 'repeat'])  AS exon_repeat,
                            SUM(num_variants) FILTER (WHERE hits @> ARRAY['intron'])  AS intron,
                            SUM(num_variants) FILTER (WHERE hits @> ARRAY['intron', 'repeat'])  AS intron_repeat
                    FROM mRNA_hit_counts GROUP BY dataset),

                    mRNA_plot AS (
                    SELECT dataset,
                    jsonb_build_object(
                            'chart', jsonb_build_object('type', 'bar', 'width', 500), 
                            'credits', jsonb_build_object('enabled', false),
                            'title', jsonb_build_object('text', 'N Variants contained within mRNA regions'),
                            'xAxis', jsonb_build_object('categories', jsonb_build_array('exon', 'intron', 'intergenic')),
                            'yAxis', jsonb_build_object('min', 0, 'title', jsonb_build_object('text', 'N Variants')),
                            'legend', jsonb_build_object('reversed', true),
                            'plotOptions', jsonb_build_object('series', jsonb_build_object('stacking', 'normal')),
                            'series', jsonb_build_array(
                                    jsonb_build_object('color', 'orange', 'name', 'Non-repeat regions', 'data', jsonb_build_array(exon, intron, intergenic)),
                                    jsonb_build_object('color', '#476387', 'name', 'Repeat regions', 'data', jsonb_build_array(exon_repeat, intron_repeat, intergenic_repeat)))
                    ) AS mRNA_summary_chart_json     
                    FROM mRNA_hits_by_category_counts),

                    reg_hits_by_category_counts AS (
                    SELECT  dataset,
                        SUM(num_variants) FILTER (WHERE hits @> ARRAY['promoter'])  AS promoter,
                            SUM(num_variants) FILTER (WHERE hits @> ARRAY['promoter', 'repeat'])  AS promoter_repeat,
                            SUM(num_variants) FILTER (WHERE hits @> ARRAY['3utr_exon'])  AS three_utr_exon,
                            SUM(num_variants) FILTER (WHERE hits @> ARRAY['3utr_exon', 'repeat'])  AS three_utr_exon_repeat,
                            SUM(num_variants) FILTER (WHERE hits @> ARRAY['5utr_exon'])  AS five_utr_exon,
                            SUM(num_variants) FILTER (WHERE hits @> ARRAY['5utr_exon', 'repeat'])  AS five_utr_exon_repeat,
                            SUM(num_variants) FILTER (WHERE hits @> ARRAY['3utr_intron'])  AS three_utr_intron,
                            SUM(num_variants) FILTER (WHERE hits @> ARRAY['3utr_intron', 'repeat'])  AS three_utr_intron_repeat,
                            SUM(num_variants) FILTER (WHERE hits @> ARRAY['5utr_intron'])  AS five_utr_intron,
                            SUM(num_variants) FILTER (WHERE hits @> ARRAY['5utr_intron', 'repeat'])  AS five_utr_intron_repeat  
                    FROM mRNA_hit_counts GROUP BY dataset),

                    reg_plot AS (
                    SELECT dataset,
                    jsonb_build_object(
                            'chart', jsonb_build_object('type', 'bar', 'width', 500), 
                            'credits', jsonb_build_object('enabled', false),
                            'title', jsonb_build_object('text', 'N Variants contained within mRNA regulatory regions'),
                            'xAxis', jsonb_build_object('categories', jsonb_build_array('promoter', '5''UTR exon', '5''UTR intron', '3''UTR exon', '3''UTR intron')),
                            'yAxis', jsonb_build_object('min', 0, 'title', jsonb_build_object('text', 'N Variants')),
                            'legend', jsonb_build_object('reversed', true),
                            'plotOptions', jsonb_build_object('series', jsonb_build_object('stacking', 'normal')),
                            'series', jsonb_build_array(
                                    jsonb_build_object('color', 'orange', 'name', 'Non-repeat regions', 'data', jsonb_build_array(promoter, five_utr_exon, five_utr_intron, three_utr_exon, three_utr_intron)),
                                    jsonb_build_object('color', '#476387', 'name', 'Repeat regions', 'data', jsonb_build_array(promoter_repeat, five_utr_exon_repeat, five_utr_intron_repeat, three_utr_exon_repeat, three_utr_intron_repeat)))
                    ) AS reg_summary_chart_json     
                    FROM reg_hits_by_category_counts)

                    SELECT r.dataset AS track, '@PROJECT_ID@'::text AS project_id,
                    jsonb_build_array(jsonb_build_object('name', 'summary', 'chart', mRNA_summary_chart_json), jsonb_build_object('name', 'reg_summary', 'chart', reg_summary_chart_json)) AS charts
                    FROM  mRNA_plot m, reg_plot r
                    WHERE r.dataset = m.dataset
                ]]>
            </sql>
        </sqlQuery>


        <!-- =============================================================== -->
        <!-- Functional mapping -->
        <!-- =============================================================== -->
        <sqlQuery name="FANTOM5">
            <column name="track"/>
            <column name="project_id"/>
            <column name="chart"/>
            <sql>
                <![CDATA[  
                    WITH dataset AS (##WDK_ID_SQL##),

                    variant_counts AS (
                    SELECT dataset, resource, chr, category, tag_id, COUNT(DISTINCT variant_position)::text AS num_variants
                    FROM INFERNO.ExpandedEnhancerOverlaps, dataset
                    WHERE dataset = dataset.track AND resource = 'FANTOM5'
                    GROUP BY dataset, resource, category, tag_id, chr),

                    categories AS (
                    SELECT dataset,  
                    jsonb_agg(DISTINCT category ORDER BY category DESC) AS tissue,
                    jsonb_agg(DISTINCT tag_id ORDER by tag_id DESC) AS tag
                    FROM variant_counts GROUP BY dataset),

                    tag_indexes AS (
                    SELECT dataset, t.value, t.ordinality, t.ordinality - 1 AS index
                    FROM categories,
                    jsonb_array_elements_text(tag) WITH ORDINALITY t),

                    tissue_indexes AS (
                    SELECT dataset,   t.value, t.ordinality, t.ordinality - 1 AS index
                    FROM categories,
                    jsonb_array_elements_text(tissue) WITH ORDINALITY t),

                    row_summary AS (
                    SELECT v.dataset, category, tag_id, ROW_NUMBER() OVER (ORDER BY num_variants DESC) AS row_num, t.index || ',' || c.index || ',' || num_variants::text AS row_csv
                    FROM variant_counts v, tag_indexes t, tissue_indexes c
                    WHERE v.dataset = t.dataset 
                    AND v.dataset = c.dataset
                    AND v.category = c.value
                    AND v.tag_id = t.value
                    ),

                    summary AS (
                    SELECT dataset,  'Tissue,Tag,N@' || string_agg(row_csv, '@' ORDER BY row_num) AS result_csv,
                    jsonb_agg(DISTINCT category ORDER BY category DESC) AS tissue,
                    jsonb_agg(DISTINCT tag_id ORDER BY tag_id DESC) AS tag
                    FROM row_summary GROUP BY dataset)

                    SELECT dataset AS track, '@PROJECT_ID@'::text AS project_id,
                    jsonb_build_object(
                            'data', jsonb_build_object('csv', result_csv, 'lineDelimiter', '@'),
                            'chart', jsonb_build_object('type', 'heatmap', 'width', 800), 
                            'credits', jsonb_build_object('enabled', false),
                            'title', jsonb_build_object('text', 'N variants per tag and tissue-specific enhancer region'),
                            'xAxis', jsonb_build_object('categories', tag, 'title', jsonb_build_object('text','Tag Region')),
                            'yAxis', jsonb_build_object('categories', tissue, 'title', jsonb_build_object('text','Tissue Category')),
                            'colorAxis', jsonb_build_object('min', 0, 'minColor', 'white', 'maxColor', '#152D4C'),
                            'legend', jsonb_build_object('align', 'right', 'layout', 'vertical', 'verticalAlign', 'top', 'margin', 20, 'symbolHeight', 280, 'y', 25),
                            'tooltip', jsonb_build_object('useHTML', true, 'headerFormat', '', 'pointFormat', '<span style=''color:orange''> {point.value} variant(s)</span>'),
                            'series', jsonb_build_array(jsonb_build_object('borderWidth', 1, 'nullColor', 'white')))  AS chart
                    FROM summary
                ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="Roadmap">
            <column name="track"/>
            <column name="project_id"/>
            <column name="chart"/>
            <sql>
                <![CDATA[  
                    WITH dataset AS (##WDK_ID_SQL##),

                    variant_counts AS (
                    SELECT dataset, resource, chr, category, tag_id, COUNT(DISTINCT variant_position)::text AS num_variants
                    FROM INFERNO.ExpandedEnhancerOverlaps, dataset
                    WHERE dataset = dataset.track AND resource = 'Roadmap'
                    GROUP BY dataset, resource, category, tag_id, chr),

                    categories AS (
                    SELECT dataset,  
                    jsonb_agg(DISTINCT category ORDER BY category DESC) AS tissue,
                    jsonb_agg(DISTINCT tag_id ORDER by tag_id DESC) AS tag
                    FROM variant_counts GROUP BY dataset),

                    tag_indexes AS (
                    SELECT dataset, t.value, t.ordinality, t.ordinality - 1 AS index
                    FROM categories,
                    jsonb_array_elements_text(tag) WITH ORDINALITY t),

                    tissue_indexes AS (
                    SELECT dataset,   t.value, t.ordinality, t.ordinality - 1 AS index
                    FROM categories,
                    jsonb_array_elements_text(tissue) WITH ORDINALITY t),

                    row_summary AS (
                    SELECT v.dataset, category, tag_id, ROW_NUMBER() OVER (ORDER BY num_variants DESC) AS row_num, t.index || ',' || c.index || ',' || num_variants::text AS row_csv
                    FROM variant_counts v, tag_indexes t, tissue_indexes c
                    WHERE v.dataset = t.dataset 
                    AND v.dataset = c.dataset
                    AND v.category = c.value
                    AND v.tag_id = t.value
                    ),

                    summary AS (
                    SELECT dataset,  'Tissue,Tag,N@' || string_agg(row_csv, '@' ORDER BY row_num) AS result_csv,
                    jsonb_agg(DISTINCT category ORDER BY category DESC) AS tissue,
                    jsonb_agg(DISTINCT tag_id ORDER BY tag_id DESC) AS tag
                    FROM row_summary GROUP BY dataset)

                    SELECT dataset AS track, '@PROJECT_ID@'::text AS project_id,
                    jsonb_build_object(
                            'data', jsonb_build_object('csv', result_csv, 'lineDelimiter', '@'),
                            'chart', jsonb_build_object('type', 'heatmap', 'width', 800), 
                            'credits', jsonb_build_object('enabled', false),
                            'title', jsonb_build_object('text', 'N variants per tag and tissue-specific enhancer region'),
                            'xAxis', jsonb_build_object('categories', tag, 'title', jsonb_build_object('text','Tag Region')),
                            'yAxis', jsonb_build_object('categories', tissue, 'title', jsonb_build_object('text','Tissue Category')),
                            'colorAxis', jsonb_build_object('min', 0, 'minColor', 'white', 'maxColor', '#152D4C'),
                            'legend', jsonb_build_object('align', 'right', 'layout', 'vertical', 'verticalAlign', 'top', 'margin', 20, 'symbolHeight', 280, 'y', 25),
                            'tooltip', jsonb_build_object('useHTML', true, 'headerFormat', '', 'pointFormat', '<span style=''color:orange''> {point.value} variant(s)</span>'),
                            'series', jsonb_build_array(jsonb_build_object('borderWidth', 1, 'nullColor', 'white')))  AS chart
                    FROM summary
                ]]>
            </sql>
        </sqlQuery>
    </querySet>
</wdkModel>
