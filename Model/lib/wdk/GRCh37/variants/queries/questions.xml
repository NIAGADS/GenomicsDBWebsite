<?xml version="1.0" encoding="UTF-8"?>
<wdkModel>
  <querySet name="VariantIds" queryType="id" isCacheable="true">
    
    <!-- =============================================================== -->
    <!-- By Identifier -->
    <!-- =============================================================== -->

    <sqlQuery name="Identifier">
      <paramRef ref="variantParams.generic_variant_identifier"/>
      <column name="source_id"/>
      <column name="project_id"/>
      <sql>
        <![CDATA[
		 SELECT '@PROJECT_ID@'::text AS project_id,
		 find_variant_primary_key(lower($$generic_variant_identifier$$))
    	]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="Upload">
      <paramRef ref="variantParams.ds_variant_identifiers"/>
      <column name="source_id"/>
      <column name="project_id"/>
      <sql>
        <![CDATA[
		 SELECT '@PROJECT_ID@'::text AS project_id,
		 find_variant_primary_key(ids.source_id)
		 FROM (SELECT source_id FROM ($$ds_variant_identifiers$$) ids
        ]]>
      </sql>
    </sqlQuery>


    <!-- =============================================================== -->
    <!-- Annotation -->
    <!-- =============================================================== -->
   
     
    <!-- =============================================================== -->
    <!-- By Trait Association -->
    <!-- =============================================================== -->
  
    <sqlQuery name="GWAS">
      <paramRef ref="sharedParams.gwas_accession"/>
      <paramRef ref="sharedParams.gwas_dataset"/>
	  <paramRef ref="sharedParams.pvalue"/>

      <column name="source_id"/>
      <column name="project_id"/>
      <column name="test_allele"/>
      <column name="pvalue" sortingColumn="log10_pvalue"/>
      <column name="log10_pvalue"/>
	
		<sql>
			<![CDATA[
				WITH Results AS (
				SELECT r.variant_record_primary_key AS source_id,
				-1 * r.neg_log10_pvalue AS log10_pvalue,
				r.pvalue_display AS pvalue,
				r.allele AS test_allele
				FROM Results.VariantGWAS r,
				Study.ProtocolAppNode pan
				WHERE  neg_log10_pvalue >= -1 * log(replace(replace(replace(replace($$pvalue$$, ' ', ''), 'x10^', 'e'), 'x10', 'e'), '^', 'e')::numeric)
				AND pan.source_id = $$gwas_dataset$$
				AND r.protocol_app_node_id = pan.protocol_app_node_id)
				

				SELECT DISTINCT ON (source_id)
				source_id,
				'@PROJECT_ID@'::text AS project_id,
				first_value(log10_pvalue) OVER wnd AS log10_pvalue,
				first_value(pvalue) OVER wnd AS pvalue,
				first_value(test_allele) OVER wnd AS test_allele
				FROM Results

				WINDOW wnd AS (
	       			PARTITION BY source_id ORDER BY log10_pvalue ASC -- return only top result for the dataset
	       			ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
	       			)
			]]>
		</sql>
    </sqlQuery>
    
    <!-- =============================================================== -->
    <!-- Genomic Location -->
    <!-- =============================================================== -->
    
   <!-- <sqlQuery name="VariantsByRegion">
      <paramRef ref="variantParams.span"/>
      <column name="source_id"/>
      <column name="project_id"/>
 
      <sql>
    	<![CDATA[
    		 WITH Location AS (
		 SELECT CASE WHEN $$span$$ LIKE '%:%' THEN replace($$span$$, '..', '-')::text ELSE $$span$$ || ':' || '1-' || nas.length END AS source_id
		 , CASE WHEN $$span$$ LIKE '%:%' THEN SPLIT_PART($$span$$, ':', 1)::text ELSE $$span$$ END AS chromosome
		 , CASE WHEN $$span$$ LIKE '%:%' THEN SPLIT_PART(SPLIT_PART($$span$$, ':', 2), '-', 1)::numeric ELSE 1 END AS region_start
		 , CASE WHEN $$span$$ LIKE '%:%' THEN SPLIT_PART(SPLIT_PART($$span$$, ':', 2), '-', 2)::numeric ELSE nas.length END AS region_end
		 FROM DoTS.ExternalNASequence nas
		 WHERE SPLIT_PART($$span$$, ':', 1)::text = nas.source_id)
    		 SELECT sf.primary_key AS source_id
    		 , '@PROJECT_ID@' AS project_id
    		 FROM DoTS.SnpFeature sf
    		 , Location l
    		 WHERE l.chromosome = sf.chromosome
    		 AND sf.position_start between l.region_start::numeric and l.region_end::numeric
		 AND sf.name != 'dbSNP_merge'
    	]]>
      </sql>
    </sqlQuery>-->
    
    <sqlQuery name="Gene">
      <paramRef ref="geneParams.generic_gene_identifier"/>
      <paramRef ref="variantParams.flanking"/>
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="relative_position"/>
	  <column name="distance"/>
 
      <sql>
    	<![CDATA[
				WITH ids AS (
						SELECT ga.source_id
						FROM CBIL.GeneAttributes ga
						WHERE ga.gene_symbol = UPPER($$generic_gene_identifier$$)
						OR UPPER($$generic_gene_identifier$$) = ANY (STRING_TO_ARRAY(UPPER(ga.annotation->>'alias_symbol'), '|'))
						OR UPPER($$generic_gene_identifier$$) = ANY (STRING_TO_ARRAY(UPPER(ga.annotation->>'prev_symbol'), '|'))
						OR ga.annotation->>'entrez_id' = $$generic_gene_identifier$$
						OR ga.source_id = $$generic_gene_identifier$$),

				Genes AS (
						SELECT g.source_id,
						find_bin_index(g.chromosome, g.location_start - $$flanking$$, g.location_end + $$flanking$$) AS flanked_bin_index,
						numrange(g.location_start - $$flanking$$, g.location_end + $$flanking$$, '[]') AS flanked_span,
						location_start,
						location_end
						FROM CBIL.GeneAttributes  g, ids
						WHERE ids.source_id = g.source_id)

				SELECT g.source_id AS gene_source_id, v.record_pk AS source_id,  '@PROJECT_ID@'::text AS project_id,

				CASE WHEN v.location_start < g.location_start THEN build_text_attribute('upstream', NULL, 'red')::text
				WHEN v.location_start > g.location_end THEN build_text_attribute('downstream', NULL, 'green')::text
				ELSE build_text_attribute('in gene', NULL, NULL)::text END AS relative_position,

				CASE WHEN v.location_start > g.location_end THEN v.position - g.location_end
				ELSE abs(g.location_start - v.position) END AS distance

				FROM Niagads.Variant v,
				genes g
				WHERE g.flanked_bin_index @> v.bin_index
				AND g.flanked_span @> v.position::numeric
    	]]>
      </sql>
    </sqlQuery>

 	<sqlQuery name="Transcript">
      <!-- <paramRef ref="variantParams.transcript_identifier"/> -->
      <paramRef ref="variantParams.flanking"/>
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="relative_position"/>
	  <column name="distance"/>
 
      <sql>
    	<![CDATA[
				WITH ids AS (
						SELECT ta.source_id
						FROM NIAGADS.TranscriptAttributes ta
						WHERE ta.source_id = $$transcript_identifier$$),

				Transcripts AS (
						SELECT ta.source_id,
						find_bin_index(ta.chromosome, ta.location_start - $$flanking$$, ta.location_end + $$flanking$$) AS flanked_bin_index,
						numrange(ta.location_start - $$flanking$$, ta.location_end + $$flanking$$, '[]') AS flanked_span,
						ta.location_start,
						ta.location_end
						FROM NIAGADS.TranscriptAttributes ta, ids
						WHERE ids.source_id = ta.source_id)

				SELECT g.source_id AS transcript_source_id, v.record_pk AS source_id,  '@PROJECT_ID@'::text AS project_id,

				CASE WHEN v.location_start < g.location_start THEN build_text_attribute('upstream', NULL, 'red')::text
				WHEN v.location_start > g.location_end THEN build_text_attribute('downstream', NULL, 'green')::text
				ELSE build_text_attribute('in gene', NULL, NULL)::text END AS relative_position,

				CASE WHEN v.location_start > g.location_end THEN v.position - g.location_end
				ELSE abs(g.location_start - v.position) END AS distance

				FROM Niagads.Variant v,
				transcripts g
				WHERE g.flanked_bin_index @> v.bin_index
				AND g.flanked_span @> v.position::numeric
    	]]>
      </sql>
    </sqlQuery>

  </querySet>
</wdkModel>
