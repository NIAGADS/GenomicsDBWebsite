<?xml version="1.0" encoding="UTF-8"?>
<wdkModel>

  <querySet name="VariantAttributes" queryType="attribute" isCacheable="false">

    <!-- =================================================================== -->
    <!-- Alias -->
    <!-- allow search by refsnp, but only return first hit -->
    <!-- =================================================================== -->
    <sqlQuery name="VariantAlias" doNotTest="true">
      <column name="source_id" columnType="string"/>
      <column name="project_id" columnType="string"/>
      <column name="old_source_id" columnType="string"/>
      <sql>
	<![CDATA[
			WITH ids AS (##WDK_ID_SQL##)
			SELECT find_variant_primary_key(ids.old_source_id) AS source_id,
			ids.old_source_id AS old_source_id,
			'@PROJECT_ID@'::text AS project_id
			FROM ids
		]]>
      </sql>
    </sqlQuery>


    <!-- =============================================================== -->
    <!-- Basic Attributes -->
    <!-- =============================================================== -->

    <sqlQuery name="SortingAttributes">
      <column name="project_id" columnType="string"/>
      <column name="source_id" columnType="string"/>
      <column name="display_metaseq_id" columnType="string"/>
      <sql>
	<![CDATA[
		 SELECT '@PROJECT_ID@'::text AS project_id, 
		 ids.source_id AS source_id,
		 truncate_str(split_part(ids.source_id, '_', 1), 27) AS display_metaseq_id
		 FROM (##WDK_ID_SQL##) ids			
	]]>	
      </sql>
    </sqlQuery>

    <sqlQuery name="BasicAttributes">
      <column name="project_id" columnType="string"/>
      <column name="source_id" columnType="string"/>
      <column name="metaseq_id" columnType="string"/>
      <column name="ref_snp_id" columnType="string"/>

      <column name="chromosome" columnType="string"/>
      <column name="position" columnType="number"/>
      <column name="location" columnType="string"/>

      <column name="ref_allele" columnType="string"/>
      <column name="alt_allele" columnType="string"/>
      <column name="display_allele" columnType="string"/>
      <column name="sequence_allele" columnType="string"/>
      <column name="sequence_allele_display" columnType="string"/>
      
      <column name="variant_class_abbrev" columnType="string"/>
      <column name="variant_class" columnType="string"/>

      <column name="adsp_display_flag" columnType="string"/>

      <column name="is_adsp_variant" columnType="boolean"/>
      <column name="is_adsp_wes" columnType="boolean"/>
      <column name="is_adsp_wgs" columnType="boolean"/>

      <column name="adsp_wgs_qc_filter_status" columnType="boolean"/>
      <column name="adsp_wes_qc_filter_status" columnType="boolean"/>
      
      <sql>
	<![CDATA[
		 WITH ids AS (##WDK_ID_SQL##),
		 
		 gv_flag AS (
		 SELECT TRUE AS flag FROM NIAGADS.Variant v, ids
		 WHERE ids.source_id = v.record_primary_key),
		 
		 genomics_variant_attributes AS (
		 SELECT 
		 '@PROJECT_ID@'::text AS project_id,
		 record_primary_key AS source_id,
		 
		 -- truncate_str(metaseq_id, 27) AS display_metaseq_id,
		 metaseq_id,
		 ref_snp_id,
		 
		 ref_allele,
		 alt_allele,
		 
		 chromosome,
		 position,
		 CASE WHEN location_start = location_end THEN NULL ELSE location_start::text || ' - ' || location_end::text END AS location,
		 
		 display_allele,
		 sequence_allele,
		 variant_class_abbrev,
		 variant_class(variant_class_abbrev, ref_allele, alt_allele) AS variant_class,
		 
		 sequence_allele_display(sequence_allele::TEXT) AS sequence_allele_display, 
		 
		 qc.wes_filter->>'text'::text AS adsp_wes_qc_filter_status,		 
		 qc.wgs_filter->>'text'::text AS adsp_wgs_qc_filter_status,

		 qc.is_adsp_variant,
		 adsp_variant_display_flag(v.is_adsp_variant) AS adsp_display_flag,

		 qc.is_adsp_wes,
		 qc.is_adsp_wgs
		 
		 FROM NIAGADS.Variant v, ids, adsp_qc_status_niagads(ids.source_id) qc
		 WHERE v.record_primary_key = ids.source_id),
		 
		 annotated_variant AS (
		 SELECT split_part(source_id, ':', 3) AS ref_allele,
		 split_part(split_part(source_id, '_', 1), ':', 4) AS alt_allele,
		 split_part(source_id, ':', 2)::integer AS position,
		 split_part(source_id, '_', 1) AS metaseq_id,
		 split_part(source_id, '_', 2) AS ref_snp_id,
		 'chr' || split_part(source_id, ':', 1)::text AS chromosome
		 FROM ids),
		 
		 annotated_variant_attributes AS (
		 SELECT 
		 '@PROJECT_ID@'::text AS project_id,
		 ids.source_id,
		 
		 --truncate_str(av.metaseq_id, 27) AS display_metaseq_id,
		 av.metaseq_id,
		 av.ref_snp_id,
		 
		 av.ref_allele,
		 av.alt_allele,
		 
		 av.chromosome,
		 av.position, 
		 CASE WHEN da.location_start = da.location_end THEN NULL ELSE da.location_start::text || ' - ' || da.location_end::text END AS location,
		 
		 da.display_allele,
		 da.sequence_allele,
		 da.variant_class_abbrev,
		 da.variant_class,

		 sequence_allele_display(da.sequence_allele::TEXT) AS sequence_allele_display, 

		 qc.wes_filter->>'text'::text AS adsp_wes_qc_filter_status,
		 qc.wgs_filter->>'text'::text AS adsp_wgs_qc_filter_status,

		 qc.is_adsp_variant,
		 adsp_variant_display_flag(qc.is_adsp_variant) AS adsp_display_flag,

		 qc.is_adsp_wes,
		 qc.is_adsp_wgs
	 
		 FROM annotated_variant av, ids,
		 normalize_alleles(av.ref_allele, av.alt_allele) na, 
		 display_allele_attributes(av.ref_allele, av.alt_allele, na.ref, na.alt, av.position) da,
		 adsp_qc_status(ids.source_id) qc)
		 
		 SELECT * FROM genomics_variant_attributes WHERE EXISTS (SELECT flag FROM gv_flag)
		 UNION 
		 SELECT * FROM annotated_variant_attributes WHERE NOT EXISTS (SELECT flag FROM gv_flag)
	]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="MostSevereConsequence">
      <column name="project_id" columnType="string"/>
      <column name="source_id" columnType="string"/>
      <column name="most_severe_consequence" columnType="string"/>
      <column name="msc_impacted_gene" columnType="string"/>
      <column name="msc_impacted_gene_symbol" columnType="string"/>
      <column name="msc_impacted_gene_link" columnType="string"/>
      <column name="msc_impact" columnType="string"/>
      <column name="msc_is_coding" columnType="string"/>
      <column name="msc_amino_acid_change" columnType="string"/>
      <column name="msc_codon_change" columnType="string"/>
      <column name="msc_impacted_transcript" columnType="string"/>
      <sql>
	<![CDATA[
		 WITH id AS (##WDK_ID_SQL##)
		 
		 SELECT msc.source_id,
		 '@PROJECT_ID@'::text AS project_id,
		 array_to_string(json_array_cast_to_text((msc->'consequence_terms')::json), ',') AS most_severe_consequence,
		 msc->>'gene_id' AS msc_impacted_gene,
		 msc->>'gene_symbol' AS msc_impacted_gene_symbol,
		 build_link_attribute(msc->>'gene_symbol', '/record/gene/', msc->>'gene_id', 'view gene annotations')::text AS msc_impacted_gene_link,
		 lower(msc->>'impact') AS msc_impact,
		 build_icon_attribute('Coding', 'fa-check', 'green', NULL, msc->>'consequence_is_coding') AS msc_is_coding,

		 replace(replace(msc_impacted_transcript(msc->>'transcript_id', '@PROJECT_ID@'), '+ENSEMBL_TRANSCRIPT_URL_GRCh38+', 
		 '@ENSEMBL_TRANSCRIPT_URL_GRCh38@'), '+ENSEMBL_TRANSCRIPT_URL_GRCh37+', '@ENSEMBL_TRANSCRIPT_URL_GRCh37@') AS msc_impacted_transcript,  
           
		 msc->>'codons' AS msc_codon_change,
		 msc->>'amino_acids' AS msc_amino_acid_change		 
		 FROM (SELECT id.source_id, adsp_most_severe_consequence(id.source_id) AS msc FROM id) msc
	]]>
      </sql>
    </sqlQuery>
  
    <sqlQuery name="GWSDatasetsPlot">
      <column name="source_id" columnType="string"/>
      <column name="gws_datasets_summary_plot" columnType="string"/>
      <sql>
	  <![CDATA[
		   WITH id AS (##WDK_ID_SQL##),

		   phenotype AS (
		   SELECT t.protocol_app_node_id,
		   c.characteristic_type AS category,

		   CASE WHEN c.characteristic_type = 'diagnosis' THEN
                   CASE WHEN c.characteristic ILIKE 'late onset Alz%' THEN 'LOAD'
                   WHEN c.characteristic ILIKE '%Alzheimer%' THEN 'AD'
                   WHEN c.characteristic ILIKE 'Progressive%' THEN 'PSP'
                   WHEN c.characteristic ILIKE 'Frontotemporal%' THEN 'FTD'
                   WHEN c.characteristic ILIKE 'Lewy%' THEN 'LBD'
                   WHEN c.characteristic = 'dementia' THEN 'DEM'
                   WHEN c.characteristic = 'cognitive impairment' THEN 'CI' 
		   END

                   WHEN c.characteristic_type = 'neuropathology' THEN -- neuropathology
                   CASE WHEN c.characteristic ILIKE '%Braak%' THEN 'Braak Stages'
                   WHEN c.characteristic ILIKE '%CERAD%' THEN 'CERAD Score'
                   WHEN c.characteristic ILIKE '%angiopathy%' THEN 'CAA'
                   WHEN c.characteristic ILIKE '%hippo%' THEN 'Hs-Aging'
                   WHEN c.characteristic ILIKE 'Lewy%' THEN 'LB'
                   WHEN c.characteristic ILIKE '%plaques%' THEN 'NP'
                   WHEN c.characteristic ILIKE '%tangles%' THEN 'NT'
                   WHEN c.characteristic ILIKE '%vascular%' THEN 'VBI'
                   END

                   ELSE -- biomarkers
                   CASE WHEN c.characteristic IN ('memory performance', 'linguistic error measurement', 'visuospatial impairment')
                   THEN 'CIM'
		   ELSE
		   c.characteristic END
		   END AS phenotype

		   FROM  NIAGADS.TrackAttributes t,
		   NIAGADS.ProtocolAppNodeCharacteristic c
		   WHERE t.subcategory = 'GWAS summary statistics'
		   AND t.dataset_accession NOT LIKE '%CATALOG%'
		   AND c.protocol_app_node_id = t.protocol_app_node_id
		   AND c.characteristic_type IN ('diagnosis', 'neuropathology', 'biomarker')
		   AND c.characteristic NOT IN ('autopsy-based diagnosis')
		   ),

		   hits AS (		  
		   SELECT DISTINCT id.source_id,
		   r.protocol_app_node_id,
		   CASE WHEN r.neg_log10_pvalue < -1 * log(5e-8) THEN FALSE ELSE TRUE END AS has_gws,
		   p.phenotype,
		   p.category,
		   ROW_NUMBER() OVER(ORDER BY category, phenotype) AS sort_order
		   FROM Results.VariantGWAS r, id, phenotype p
		   WHERE r.variant_record_primary_key = id.source_id
		   AND r.neg_log10_pvalue >= 3.0
		   AND p.protocol_app_node_id = r.protocol_app_node_id
		   ORDER BY p.category, p.phenotype
		   ),
		   
		   ycategories AS (
		   SELECT DISTINCT source_id, category, phenotype,
		   MIN(sort_order) AS sort_order,
		   ROW_NUMBER() OVER(ORDER BY MIN(sort_order)) - 1 AS y_index
		   FROM hits
		   GROUP BY source_id, category, phenotype
		   ),
		   
		   ycategories_json AS (
		   SELECT source_id, category,
		   jsonb_agg(phenotype ORDER BY y_index) AS json
		   FROM ycategories
		   GROUP BY source_id, category
		   ),
		   
		   gws_counts AS (
		   SELECT source_id, category, phenotype,
		   SUM (CASE WHEN has_gws THEN 1 ELSE 0 END) AS gws_count,
		   SUM (CASE WHEN has_gws THEN 0 ELSE 1 END) AS not_gws_count
		   FROM hits
		   GROUP BY source_id, category, phenotype
		   ),	
		   
		   series AS (
		   SELECT gc.source_id, gc.category,
		   jsonb_build_object('name', 'p < 5e-8', 'data', jsonb_agg(gc.gws_count ORDER BY c.y_index)) AS series_data
		   FROM gws_counts gc, ycategories c
		   WHERE gc.source_id = c.source_id
		   AND gc.phenotype = c.phenotype
		   AND gc.category = c.category
		   GROUP BY gc.source_id, gc.category

		   UNION ALL
		   
		   SELECT gc.source_id, gc.category,
		   jsonb_build_object('name', '5e-8 < p < 1e-3', 'data', jsonb_agg(gc.not_gws_count ORDER BY c.y_index)) AS series_data
		   FROM gws_counts gc, ycategories c
		   WHERE gc.source_id = c.source_id
		   AND gc.phenotype = c.phenotype
		   AND gc.category = c.category
		   GROUP BY gc.source_id, gc.category
		   ),

	    	   diagnosis AS (
		   SELECT s.source_id,
		   jsonb_build_object(
		   'title', 'Diagnosis',
		   'categories', yc.json,
		   'series', jsonb_agg(series_data)) AS chart_data
		   FROM series s, ycategories_json yc
		   WHERE s.source_id = yc.source_id
		   AND s.category = 'diagnosis'
		   AND s.category = yc.category		   
		   GROUP BY s.source_id, yc.json
		   ),
		   
		   neuropathology AS (
		   SELECT s.source_id,
		   jsonb_build_object(
		   'title', 'Neuropathology',
		   'categories', yc.json,
		   'series', jsonb_agg(series_data)) AS chart_data
		   FROM series s, ycategories_json yc
		   WHERE s.source_id = yc.source_id
		   AND s.category = 'neuropathology'
		   AND s.category = yc.category
		   GROUP BY s.source_id, yc.json
		   ),

		   biomarker AS (
		   SELECT s.source_id,
		   jsonb_build_object(
		   'title', 'Biomarker',
		   'categories', yc.json,
		   'series', jsonb_agg(series_data)) AS chart_data		   
		   FROM series s, ycategories_json yc
		   WHERE s.source_id = yc.source_id
		   AND s.category = 'biomarker'
		   AND s.category = yc.category
		   GROUP BY s.source_id, yc.json
		   )
		   
		   SELECT id.source_id,
		   jsonb_build_array_check_nulls((SELECT chart_data FROM diagnosis), 
		   (SELECT chart_data FROM neuropathology),
		   (SELECT chart_data FROM biomarker))::text AS gws_datasets_summary_plot
		   FROM id       
	  ]]>
	  </sql>
	</sqlQuery>

  
    <!-- =============================================================== -->
    <!-- Genomic Location -->
    <!-- =============================================================== -->

    <sqlQuery name="ColocatedVariants">
      <column name="project_id" columnType="string"/>
      <column name="source_id" columnType="string"/>
      <column name="num_colocated_variants" columnType="number"/>
      <column name="colocated_variants" columnType="string"/>
      <column name="is_multi_allelic" columnType="boolean"/>
      <column name="alternative_variants" columnType="string"/>
      <sql>
	<![CDATA[
		 WITH id AS ( ##WDK_ID_SQL## ),

		 vid AS (SELECT source_id,
		 'chr' || split_part(id.source_id, ':', 1) AS chromosome,
		 split_part(id.source_id, ':', 3) AS ref_allele,
		 split_part(split_part(id.source_id, '_', 1), ':',4) AS alt_allele,
		 split_part(id.source_id, '_', 2) AS ref_snp_id,
		 split_part(id.source_id, ':', 2)::bigint AS location
		 FROM id),

		 bi AS (
		 SELECT source_id,
		 find_bin_index(chromosome, da.location_start, da.location_end) AS  bin,
		 location,
		 chromosome,
		 da.location_start,
		 da.location_end
		 FROM vid,
		 normalize_alleles(vid.ref_allele, vid.alt_allele) na, 
		 display_allele_attributes(vid.ref_allele, vid.alt_allele, na.ref, na.alt, location::integer) da),
		 
		 cv AS (
		 SELECT bi.source_id, v.record_primary_key, 
		 v.ref_snp_id, v.metaseq_id, v.location  
		 FROM AnnotatedVDB.Variant v, bi ,
		 normalize_alleles(split_part(v.metaseq_id, ':', 3), split_part(v.metaseq_id, ':', 4)) na, 
		 display_allele_attributes(split_part(v.metaseq_id, ':', 3), split_part(v.metaseq_id, ':', 4), na.ref, na.alt, v.location::integer) da
		 WHERE bi.bin @> bin_index
		 AND v.chromosome = bi.chromosome
		 AND int8range(bi.location_start, bi.location_end, '[]') && int8range(da.location_start, da.location_end, '[]')
		 AND v.record_primary_key != bi.source_id),

		 flags AS (
		 SELECT vid.source_id, 
		 CASE WHEN SUM((cv.location = vid.location)::integer) > 0 THEN TRUE ELSE FALSE END AS is_multi_allelic,
		 SUM((cv.location != vid.location)::integer) AS num_colocated_variants
		 FROM cv, vid GROUP BY vid.source_id),
		 
		 colocv AS (
		 SELECT flags.source_id,
		 CASE WHEN split_part(flags.source_id, '_', 2) != split_part(cv.record_primary_key, '_', 2) THEN 
		 build_link_attribute(truncate_str(cv.metaseq_id, 27) || COALESCE(' (' || cv.source_id || ')', ''), 
		 '/record/variant/', cv.record_primary_key, truncate_str(metaseq_id, 100))
		 ELSE NULL END AS colocated_variants
		 FROM flags, cv WHERE cv.source_id = flags.source_id),
		 
		 altv AS (
		 SELECT flags.source_id,
		 CASE WHEN split_part(flags.source_id, '_', 2) = split_part(cv.record_primary_key, '_', 2) THEN 
		 build_link_attribute(truncate_str(cv.metaseq_id, 27) || COALESCE(' (' || cv.ref_snp_id || ')', ''), 
		 '/record/variant/', cv.record_primary_key, truncate_str(metaseq_id, 100))
		 ELSE NULL  END AS alternative_variants
		 FROM flags, cv WHERE cv.source_id = flags.source_id),
		 
		 result AS (
		 SELECT flags.source_id,
		 flags.num_colocated_variants,
		 flags.is_multi_allelic,
		 NULLIF(jsonb_agg(DISTINCT altv.alternative_variants)::text, '[null]') AS alternative_variants,
		 NULLIF(jsonb_agg(DISTINCT colocv.colocated_variants)::text, '[null]') AS colocated_variants
		 FROM flags, cv, colocv, altv
		 GROUP BY flags.source_id, is_multi_allelic, num_colocated_variants)

		 SELECT id.source_id,
		 '@PROJECT_ID@'::text AS project_id,
		 r.num_colocated_variants,
		 r.is_multi_allelic,
		 r.alternative_variants,
		 r.colocated_variants
		 FROM id LEFT OUTER JOIN result r ON id.source_id = r.source_id
	]]>
      </sql>
    </sqlQuery>
      

    <!-- =============================================================== -->
    <!-- Function analysis -->
    <!-- =============================================================== -->

    <sqlQuery name="CADD">
      <column name="project_id" columnType="string"/>
      <column name="source_id" columnType="string"/>
      <column name="cadd_phred_score" columnType="float"/>
      <column name="cadd_raw_score" columnType="float"/>

      <sql>
	<![CDATA[
		 WITH id AS (##WDK_ID_SQL##),
		 cs AS (SELECT id.source_id, cadd(id.source_id) AS score FROM id)
		 SELECT cs.source_id,
		 '@PROJECT_ID@'::text AS project_id,
		 (score->>'CADD_phred')::numeric AS cadd_phred_score,
		 (score->>'CADD_raw_score')::numeric AS cadd_raw_score
		 FROM cs
	]]>
      </sql>
    </sqlQuery>

  </querySet>
</wdkModel>
