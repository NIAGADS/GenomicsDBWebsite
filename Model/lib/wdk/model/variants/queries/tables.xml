<?xml version="1.0" encoding="UTF-8"?>
<wdkModel>
  <querySet name="VariantTables" 
	    queryType="table" 
	    isCacheable="false">

    <!-- =============================================================== -->
    <!-- Genetic Variation -->
    <!-- =============================================================== -->
    <sqlQuery name="LocusZoomGwasDatasets">
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="dataset_list"/>
      <sql>
	<![CDATA[
		 WITH id AS (##WDK_ID_SQL##),

		 datasets AS (
		 SELECT DISTINCT id.source_id, pan.source_id AS dataset_source_id,
		 jsonb_build_object(pan.source_id, split_part(pan.source_id, '_', 1) || ': ' || pan.name) AS dataset_json
		 FROM Study.ProtocolAppNode pan,
		 Results.VariantGWAS r, id
		 WHERE r.variant_record_primary_key = id.source_id
		 AND pan.protocol_app_node_id = r.protocol_app_node_id
		 AND r.neg_log10_pvalue > 3)

		 SELECT id.source_id,
		 NULLIF(jsonb_agg(dataset_json ORDER BY dataset_source_id)::text, '[null]') AS dataset_list
		 FROM datasets RIGHT OUTER JOIN id ON id.source_id = datasets.source_id
		 GROUP BY id.source_id
	]]>
      </sql>
    </sqlQuery>
    

    <sqlQuery name="Linkage">
      <column name="source_id"/>
      <column name="variant"/>
      <column name="ref_snp_id"/>
      <column name="adsp_variant_flag"/>
      <column name="distance"/>
      <column name="r_squared"/>
      <column name="d_prime"/>
      <column name="population"/>
      <column name="minor_allele_frequency"/>
      <column name="minor_allele_frequency_ld_ref"/>
      <column name="is_annotated_flag"/>

      <sql>
	<![CDATA[
		 WITH id AS (##WDK_ID_SQL##),

		 variant AS (SELECT source_id,
		 'chr' || split_part(source_id, ':', 1)::text AS chromosome,
		 truncate_str(split_part(source_id, '_', 1), 27) AS metaseq_id,
		 CASE WHEN split_part(source_id, '_', 2) IS NULL 
		 THEN split_part(source_id, '_', 1) 
		 ELSE split_part(source_id, '_', 2) END AS pattern,
		 split_part(source_id, '_', 2) AS ref_snp_id
		 FROM id),

		 LDResult AS (
		 SELECT v.source_id, p.display_value AS population,  
		 r.distance, r.r_squared, r.d_prime,
		 CASE WHEN v.pattern= r.variants[1] 
		 THEN r.minor_allele_frequency[1] 
		 ELSE minor_allele_frequency[2] END AS minor_allele_frequency_ld_ref,

		 CASE WHEN v.pattern = r.variants[1] 
		 THEN r.minor_allele_frequency[2] 
		 ELSE minor_allele_frequency[1] END AS minor_allele_frequency,

		 CASE WHEN v.pattern = r.variants[1] 
		 THEN r.variants[2] ELSE r.variants[1] END AS linked_variant_ref_snp_id

		 FROM Results.VariantLD r, variant v, 
		 Study.ProtocolAppNode pan, NIAGADS.Population p
		 WHERE r.variants @> ARRAY[v.pattern]
		 AND r.chromosome = v.chromosome
		 AND pan.protocol_app_node_id = r.population_protocol_app_node_id
		 AND p.abbreviation = split_part(pan.name, ': ', 2) AND p.datasource = '1000Genomes'),

		 NiagadsVariants AS (
		 SELECT v.record_primary_key, v.ref_snp_id, 
		 v.metaseq_id, TRUE AS is_niagads_variant
		 FROM NIAGADS.Variant v
		 WHERE ref_snp_id = ANY(ARRAY(SELECT DISTINCT linked_variant_ref_snp_id FROM LDResult))),

		 ADSPVariants AS (
		 SELECT v.record_primary_key, v.ref_snp_id, 
		 v.metaseq_id, is_adsp_variant
		 FROM AnnotatedVDB.Variant v
		 WHERE v.chromosome = (SELECT chromosome FROM variant)
		 AND v.ref_snp_id = ANY(ARRAY(SELECT DISTINCT linked_variant_ref_snp_id FROM LDResult))
		 ),

		 AnnotatedVariants AS (
		 SELECT a.record_primary_key, a.ref_snp_id, 
		 build_link_attribute(truncate_str(a.metaseq_id, 27), '../variant/', a.record_primary_key, 
		 CASE WHEN length(a.metaseq_id) > 27 THEN a.metaseq_id ELSE NULL END) AS variant,

		 CASE WHEN is_adsp_variant 
		 THEN build_icon_attribute(NULL, 'fa-check', 'red', NULL, 'true')
		 ELSE NULL END AS adsp_variant_flag,

		 CASE WHEN is_niagads_variant 
		 THEN build_icon_attribute(NULL, 'fa-check', 'green', NULL, 'true') 
		 ELSE NULL END AS is_annotated_flag

		 FROM ADSPVariants a LEFT OUTER JOIN NiagadsVariants n
		 ON a.record_primary_key = n.record_primary_key)

		 SELECT r.source_id, v.*, 
		 r.distance, r.r_squared, r.d_prime, r.population,
		 
		 CASE WHEN r.minor_allele_frequency_ld_ref < 0.001 AND r.minor_allele_frequency_ld_ref > 0 
		 THEN to_char(r.minor_allele_frequency_ld_ref, '9.9EEEE')
		 WHEN r.minor_allele_frequency_ld_ref = 0 THEN 0::text
		 ELSE round(r.minor_allele_frequency_ld_ref::numeric, 3)::text 
		 END AS minor_allele_frequency_ld_ref,
		 
		 CASE WHEN r.minor_allele_frequency < 0.001 AND r.minor_allele_frequency > 0 
		 THEN to_char(r.minor_allele_frequency, '9.9EEEE')
		 WHEN r.minor_allele_frequency = 0 THEN 0::text
		 ELSE round(r.minor_allele_frequency::numeric, 3)::text 
		 END AS minor_allele_frequency
		 
		 FROM AnnotatedVariants v, LDResult r
		 WHERE r.linked_variant_ref_snp_id = v.ref_snp_id
		 ORDER BY r.population, r.r_squared DESC
	]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="AlleleFrequency">
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="ethnicity"/>
      <column name="population_abbrev"/>
      <column name="population_source"/>
      <column name="frequency"/>
      <column name="percent_frequency"/>

      <sql>
	<![CDATA[	
		 WITH id AS (##WDK_ID_SQL##),

		 freq AS (
		 SELECT id.source_id, allele_frequencies(source_id) FROM id),

		 freq_elements AS (
		 SELECT source_id, key AS datasource, 
		 jsonb_array_elements(value) AS freq_json 
		 FROM freq, jsonb_each(allele_frequencies)),

		 freq_values AS (
		 SELECT source_id,
		 CASE WHEN key SIMILAR TO 'aa|ea' THEN 'ESP' -- need to patch annotationvdb as these are misclassified as 1000Genomes
		 ELSE datasource END AS datasource, 
		 key AS population_source_id, 
		 value::numeric AS frequency 
		 FROM freq_elements, jsonb_each(freq_json))

		 SELECT v.source_id,
		 p.datasource AS population_source, -- TODO: add version
		 CASE WHEN frequency < 0.001 AND frequency > 0 THEN to_char(frequency, '9.9EEEE')
		 WHEN frequency = 0 THEN 0::text
		 ELSE round(frequency::numeric, 3)::text END AS frequency,
		 n.alt AS allele,
		 abbreviation AS population_abbrev, 

		 CASE WHEN description IS NOT NULL THEN build_text_attribute(display_value, description, NULL)
		 ELSE build_text_attribute(display_value, NULL, NULL) END AS ethnicity

		 FROM freq_values v, NIAGADS.Population p,
		 normalize_alleles(split_part(v.source_id, ':', 3), split_part(split_part(v.source_id, '_', 1), ':', 4)) n
		 WHERE p.datasource = v.datasource 
		 AND p.source_id = v.population_source_id
		 ORDER BY population_source, description NULLS FIRST, population_abbrev
	]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="ADAssociationsFromGWAS">
      <column name="source_id"/>
      <column name="allele"/>
      <column name="track_name_link"/>
      <column name="pvalue"/>

      <sql>
	<![CDATA[
		 WITH id AS (##WDK_ID_SQL##),

		 tracks AS (
		 SELECT DISTINCT ta.track, ta.protocol_app_node_id,
		 build_link_attribute(ta.name, '/record/track/', ta.track, ta.description) AS track_name_link
		 FROM NIAGADS.TrackAttributes ta,
		 NIAGADS.ProtocolAppNodeCharacteristic c
		 WHERE ta.protocol_app_node_id = c.protocol_app_node_id
		 AND ta.subcategory = 'GWAS summary statistics'
		 AND ta.dataset_accession NOT LIKE '%CATALOG%'
		 AND c.characteristic_type = 'diagnosis'
		 AND c.characteristic LIKE '%Alzh%')
		 
		 SELECT id.source_id, t.*, r.allele, to_char(r.pvalue_display::numeric, '9.99EEEE') as pvalue
		 FROM id, Results.VariantGWAS r, tracks t
		 WHERE t.protocol_app_node_id = r.protocol_app_node_id
		 AND id.source_id = r.variant_record_primary_key
		 AND r.neg_log10_pvalue > 3
		 AND r.neg_log10_pvalue != 'NaN'
		 ORDER BY neg_log10_pvalue DESC
	]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="OtherAssociationsFromGWAS">
      <column name="source_id"/>
      <column name="allele"/>
      <column name="track_name_link"/>
      <column name="pvalue"/>


      <sql>
	<![CDATA[
		 WITH id AS (##WDK_ID_SQL##),

		 tracks AS (
		 SELECT DISTINCT ta.track, ta.protocol_app_node_id,
		 build_link_attribute(ta.name, '/record/track/', ta.track, ta.description) AS track_name_link
		 FROM NIAGADS.TrackAttributes ta,
		 NIAGADS.ProtocolAppNodeCharacteristic c
		 WHERE ta.protocol_app_node_id = c.protocol_app_node_id
		 AND ta.subcategory = 'GWAS summary statistics'
		 AND ta.dataset_accession NOT LIKE '%CATALOG%'
		 AND c.characteristic_type = 'full_list'
		 AND c.characteristic NOT ILIKE '%Alzh%')
		 
		 SELECT id.source_id, t.*, r.allele, to_char(r.pvalue_display::numeric, '9.99EEEE') as pvalue
		 FROM id, Results.VariantGWAS r, tracks t
		 WHERE t.protocol_app_node_id = r.protocol_app_node_id
		 AND id.source_id = r.variant_record_primary_key
		 AND r.neg_log10_pvalue > 3
		 AND r.neg_log10_pvalue != 'NaN'
		 ORDER BY neg_log10_pvalue DESC
	]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="ADAssociationsFromCatalog">
      <column name="source_id"/>
      <column name="project_id"/>

      <column name="allele"/>
      <column name="frequency"/>


      <column name="track_name"/>
      <column name="pvalue"/>

      <column name="source"/>
      <column name="pubmed_id"/>
      <column name="study"/>
      <column name="sample"/>
      <column name="replicate_sample"/>
      <column name="trait"/>
      <column name="mapped_efo_trait"/>

      <sql>
	<![CDATA[
		 WITH id AS (##WDK_ID_SQL##),

		 tracks AS (
		 SELECT ta.track, ta.protocol_app_node_id, 'NHGRI-EBI' AS datasource
		 FROM NIAGADS.TrackAttributes ta
		 WHERE track = 'NHGRI_GWAS_CATALOG')
		 
		 SELECT id.source_id,
		 t.datasource AS source,
		 r.allele,
		 replace(r.pvalue_display, 'E', 'e') AS pvalue,
		 r.neg_log10_pvalue,
		 r.frequency,
		 r.restricted_stats->>'STUDY' AS study,

		 build_link_attribute(replace(r.restricted_stats->>'LINK', 'www.ncbi.nlm.nih.gov/pubmed/', ''), 
		 '@PUBMED_URL@', replace(r.restricted_stats->>'LINK', 'www.ncbi.nlm.nih.gov/pubmed/', ''), NULL) AS pubmed_id,

		 r.restricted_stats->>'INITIAL SAMPLE SIZE' AS sample,

		 CASE WHEN r.restricted_stats->>'REPLICATION SAMPLE SIZE' = 'NA' THEN NULL 
		 ELSE r.restricted_stats->>'REPLICATION SAMPLE SIZE' END  AS replicate_sample,

		 r.restricted_stats->>'DISEASE/TRAIT' AS trait,

		 build_link_attribute(r.restricted_stats->>'MAPPED_TRAIT', 
		 '@EFO_TRAIT_URL@', replace(r.restricted_stats->>'MAPPED_TRAIT_URI', 'http://www.ebi.ac.uk/efo/', ''), NULL) AS mapped_efo_trait

		 FROM Results.VariantGWAS r, tracks t, id
		 WHERE t.protocol_app_node_id = r.protocol_app_node_id
		 AND r.variant_record_primary_key = id.source_id
		 AND r.restricted_stats->>'DISEASE/TRAIT' ILIKE '%Alzheimer%'
		 ORDER BY r.neg_log10_pvalue DESC
	]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="OtherAssociationsFromCatalog">
      <column name="source_id"/>
      <column name="project_id"/>

      <column name="allele"/>
      <column name="frequency"/>

      <column name="track_name"/>
      <column name="pvalue"/>

      <column name="source"/>
      <column name="pubmed_id"/>
      <column name="study"/>
      <column name="sample"/>
      <column name="replicate_sample"/>
      <column name="trait"/>
      <column name="mapped_efo_trait"/>

      <sql>
	<![CDATA[
		 WITH id AS (##WDK_ID_SQL##),

		 tracks AS (
		 SELECT ta.track, ta.protocol_app_node_id, 'NHGRI-EBI' AS datasource
		 FROM NIAGADS.TrackAttributes ta
		 WHERE track = 'NHGRI_GWAS_CATALOG')
		 
		 SELECT id.source_id,
		 t.datasource AS source,
		 r.allele,
		 replace(r.pvalue_display, 'E', 'e') AS pvalue,
		 r.frequency,
		 r.restricted_stats->>'STUDY' AS study,

		 build_link_attribute(replace(r.restricted_stats->>'LINK', 'www.ncbi.nlm.nih.gov/pubmed/', ''), 
		 '@PUBMED_URL@', replace(r.restricted_stats->>'LINK', 'www.ncbi.nlm.nih.gov/pubmed/', ''), NULL) AS pubmed_id,

		 r.restricted_stats->>'INITIAL SAMPLE SIZE' AS sample,

		 CASE WHEN r.restricted_stats->>'REPLICATION SAMPLE SIZE' = 'NA' THEN NULL 
		 ELSE r.restricted_stats->>'REPLICATION SAMPLE SIZE' END  AS replicate_sample,

		 r.restricted_stats->>'DISEASE/TRAIT' AS trait,

		 build_link_attribute(r.restricted_stats->>'MAPPED_TRAIT', 
		 '@EFO_TRAIT_URL@', replace(r.restricted_stats->>'MAPPED_TRAIT_URI', 'http://www.ebi.ac.uk/efo/', ''), NULL) AS mapped_efo_trait

		 FROM Results.VariantGWAS r, tracks t, id
		 WHERE t.protocol_app_node_id = r.protocol_app_node_id
		 AND r.variant_record_primary_key = id.source_id
		 AND r.restricted_stats->>'DISEASE/TRAIT' NOT ILIKE '%Alzheimer%'
		 ORDER BY r.neg_log10_pvalue DESC
	]]>
      </sql>
    </sqlQuery>

    <!-- =============================================================== -->
    <!-- Variant Classification and Effect -->
    <!-- =============================================================== -->
    <sqlQuery name="TranscriptConsequences">
      <column name="source_id"/>
      <column name="rank"/>
      <column name="exon"/>
      <column name="impact"/>
      <column name="strand"/>
      <column name="is_canonical_transcript"/>
      <column name="gene_link"/>
      <column name="transcript_link"/>
      <column name="protein_link"/>
      <column name="distance"/>
      <column name="consequence"/>
      <column name="is_most_severe_consequence"/>
      <column name="amino_acid_change"/>
      <column name="codon_change"/>
      <column name="is_coding"/>
      <column name="cds_position"/>
      <column name="cdna_position"/>
      <column name="protein_position"/>
      <sql>
	<![CDATA[
		 WITH id AS (##WDK_ID_SQL##),

		 cjson AS (
		 SELECT id.source_id, 
		 jsonb_array_elements(adsp_ranked_consequences(id.source_id, 'transcript')) AS conseq
		 FROM id)

		 SELECT source_id, 
		 CASE WHEN conseq = adsp_most_severe_consequence(source_id) 
		 THEN build_icon_attribute(NULL, 'fa-check', 'red', NULL, 'true') 
		 ELSE NULL END AS is_most_severe_consequence,

		 conseq->>'rank' AS rank,
		 conseq->>'exon' AS exon,
		 conseq->>'impact' AS impact,
		 CASE WHEN (conseq->>'strand')::int = 1 THEN '+' ELSE '-' END AS strand,
		 CASE WHEN (conseq->>'canonical')::int = 1 THEN 'Y' ELSE NULL END AS is_canonical_transcript,
		 build_link_attribute(conseq->>'gene_symbol', '/record/gene/', conseq->>'gene_id', 'view gene details') AS gene_link,
		 build_link_attribute(conseq->>'transcript_id', CASE WHEN '@PROJECT_ID@' = 'GRCh37' 
		 THEN '@ENSEMBL_TRANSCRIPT_URL_GRCh37@' ELSE '@ENSEMBL_TRANSCRIPT_URL_GRCh38@' END, 
		 NULL, 'view transcript details from Ensembl' || CASE WHEN '@PROJECT_ID@' = 'GRCh37' 
		 THEN ' @PROJECT_ID@ Archive' ELSE '' END) AS transcript_link,

		 build_link_attribute(conseq->>'protein_id', CASE WHEN '@PROJECT_ID@' = 'GRCh37' 
		 THEN '@ENSEMBL_PROTEIN_URL_GRCh37@' ELSE '@ENSEMBL_PROTEIN_URL_GRCh38@' END, 
		 NULL, 'view protein details from Ensembl' || CASE WHEN '@PROJECT_ID@' = 'GRCh37' 
		 THEN ' @PROJECT_ID@ Archive' ELSE '' END) AS protein_link,
		 
		 conseq->>'distance' AS distance,
		 replace(array_to_string(json_array_cast_to_text((conseq->'consequence_terms')::json), ','), '_', ' ') AS consequence,
		 conseq->>'amino_acids' AS amino_acid_change,
		 conseq->>'codons' AS codon_change,

		 CASE WHEN (conseq->>'consequence_is_coding')::boolean 
		 THEN build_icon_attribute(NULL, 'fa-check', 'green', NULL, 'true') ELSE NULL END AS is_coding,

		 CASE WHEN conseq->>'cds_start' = conseq->>'cds_end' THEN conseq->>'cds_start' 
		 ELSE (conseq->>'cds_start')::text || '-' || (conseq->>'cds_end')::text END AS cds_position,

		 CASE WHEN conseq->>'cdna_start' = conseq->>'cdna_end' THEN conseq->>'cdna_start' 
		 ELSE (conseq->>'cdna_start')::text || '-' || (conseq->>'cdna_end')::text END AS cdna_position,

		 CASE WHEN conseq->>'protein_start' = conseq->>'protein_end' 
		 THEN conseq->>'protein_start' 
		 ELSE (conseq->>'protein_start')::text || '-' || (conseq->>'cdna_end')::text END AS protein_position

		 FROM cjson
		 ORDER BY rank
	]]>
      </sql>
    </sqlQuery>


    <sqlQuery name="RegulatoryConsequences">
      <column name="source_id"/>
      <column name="rank"/>
      <column name="feature_biotype"/>
      <column name="feature_link"/>	
      <column name="consequence"/>
      <column name="is_most_severe_consequence"/>
      <column name="impact"/>
      <sql>
	<![CDATA[
		 WITH id AS (##WDK_ID_SQL##),

		 cjson AS (
		 SELECT id.source_id,
		 jsonb_array_elements(adsp_ranked_consequences(id.source_id, 'regulatory')) AS conseq
		 FROM id)

		 SELECT source_id, 

		 CASE WHEN conseq = adsp_most_severe_consequence(source_id) 
		 THEN build_icon_attribute(NULL, 'fa-check', 'green', NULL, 'true') 
		 ELSE NULL END AS is_most_severe_consequence,

		 conseq->>'rank' AS rank,
		 conseq->>'impact' AS impact,
		 replace(conseq->>'biotype','_', ' ') AS feature_biotype,

		 build_link_attribute(conseq->>'regulatory_feature_id', CASE WHEN '@PROJECT_ID@' = 'GRCh37' 
		 THEN '@ENSEMBL_REGULATORY_FEATURE_URL_GRCh37@' ELSE '@ENSEMBL_REGULATORY_FEATURE_URL_GRCh38@' END, 
		 NULL, 'view feature details from Ensembl' || CASE WHEN '@PROJECT_ID@' = 'GRCh37' 
		 THEN ' @PROJECT_ID@ Archive' ELSE '' END) AS feature_link,

		 replace(array_to_string(json_array_cast_to_text((conseq->'consequence_terms')::json), ','), '_', ' ') AS consequence
		 FROM cjson
		 ORDER BY rank
	]]>
      </sql>
    </sqlQuery>


    <sqlQuery name="IntergenicConsequences">
      <column name="source_id"/>
      <column name="rank"/>
      <column name="consequence"/>
      <column name="is_most_severe_consequence"/>
      <column name="impact"/>
      
      <sql>
	<![CDATA[
		 WITH id AS (##WDK_ID_SQL##),

		 cjson AS (
		 SELECT id.source_id,
		 jsonb_array_elements(adsp_ranked_consequences(id.source_id, 'intergenic')) AS conseq
		 FROM id)

		 SELECT source_id, 

		 CASE WHEN conseq = adsp_most_severe_consequence(source_id) 
		 THEN build_icon_attribute(NULL, 'fa-check', 'green', NULL, 'true') 
		 ELSE NULL END AS is_most_severe_consequence,

		 conseq->>'rank' AS rank,
		 conseq->>'impact' AS impact,		
		 replace(array_to_string(json_array_cast_to_text((conseq->'consequence_terms')::json), ','), '_', ' ') AS consequence
		 FROM cjson
		 ORDER BY rank
	]]>
      </sql>
    </sqlQuery>

     <sqlQuery name="MotifConsequences">
      <column name="source_id"/>
      <column name="rank"/>
      <column name="feature_biotype"/>
      <column name="motif_link"/>	
      <column name="consequence"/>
      <column name="is_most_severe_consequence"/>
      <column name="impact"/>
      <column name="strand"/>
      <column name="motif_position"/>
      <column name="high_info_position"/>
      <column name="motif_score_change"/>
      <column name="feature_link"/>
      <column name="transcription_factor_complex"/>
      <column name="epigenomes"/>
      
      <sql>
	<![CDATA[
		 WITH id AS (##WDK_ID_SQL##),

		 cjson AS (
		 SELECT id.source_id,
		 jsonb_array_elements(adsp_ranked_consequences(id.source_id, 'motif')) AS conseq
		 FROM id)

		 SELECT source_id, 

		 CASE WHEN conseq = adsp_most_severe_consequence(source_id) 
		 THEN build_icon_attribute(NULL, 'fa-check', 'green', NULL, 'true') 
		 ELSE NULL END AS is_most_severe_consequence,

		 conseq->>'rank' AS rank,
		 conseq->>'impact' AS impact,		
		 replace(array_to_string(json_array_cast_to_text((conseq->'consequence_terms')::json), ','), '_',' ') AS consequence,

		 array_to_string(json_array_cast_to_text((m.annotation->'transcription_factor_complex')::json), ',') 
		 AS transcription_factor_complex,

		 array_to_string(json_array_cast_to_text((m.annotation->'epigenomes_with_experimental_evidence')::json), ',') 
		 AS epigenomes,

		 m.feature_type AS feature_biotype,
		 CASE WHEN (conseq->>'strand')::int = 1 THEN '+' ELSE '-' END AS strand,

		 conseq->>'motif_pos' AS motif_position,
		 conseq->>'high_inf_pos' AS high_info_position,
		 CASE WHEN (conseq->>'motif_score_change')::numeric > 0 
		 THEN build_icon_attribute(NULL, 'fa-caret-up', 'green', NULL, conseq->>'motif_score_change')
		 ELSE build_icon_attribute(NULL, 'fa-caret-down', 'red', NULL, conseq->>'motif_score_change')
		 END AS motif_score_change,

		 build_link_attribute(m.matrix_id, 
		 CASE WHEN '@PROJECT_ID@' = 'GRCh37' 
		 THEN '@ENSEMBL_MOTIF_FEATURE_URL_GRCh37@' 
		 ELSE '@ENSEMBL_MOTIF_FEATURE_URL_GRCh38@' END, 
		 NULL, 'view motif from Ensembl' || CASE WHEN '@PROJECT_ID@' = 'GRCh37' 
		 THEN ' @PROJECT_ID@ Archive' ELSE '' END) AS feature_link

		 FROM cjson, Results.Motif m
		 WHERE m.motif_source_id = cjson.conseq->>'motif_name'
		 AND m.chromosome = 'chr' || split_part(cjson.source_id, ':', 1)

		 ORDER BY rank
	]]>
      </sql>
    </sqlQuery>


  </querySet>
</wdkModel>
