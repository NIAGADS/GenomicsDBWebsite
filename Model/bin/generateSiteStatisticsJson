#!/usr/bin/env python3

""" 
queries against the db for site statistics that should be static per release / creates json file to be referenced by the build
target file is $PROJECT_HOME/GenomicsDBWebsite/Site/webapp/wdkCustomization/js/client/data/_siteStatistics.ts
"""

import argparse
import json
from os import path
from psycopg2.errors import lookup as elookup
from GenomicsDBData.Util.postgres_dbi import Database
from GenomicsDBData.Util.utils import xstr

def get_num_annotated_variants():
    ''' get number of annotated variants '''
 
    SQL = "SELECT replace(trim(estimate_row_count('niagads', 'Variant')),',','')::INTEGER"

    count = None
    with database.cursor() as cursor:
        cursor.execute(SQL)
        count = cursor.fetchone()[0]

    return count
        
            
def get_num_ss_datasets():
    ''' get number of datasets '''
 
    SQL = "SELECT count(track) FROM NIAGADS.TrackAttributes WHERE track LIKE 'NG0%'"

    count = None
    with database.cursor() as cursor:
        cursor.execute(SQL)
        count = cursor.fetchone()[0]

    return count


def get_num_gws_variants():
    ''' get number of gws variants '''
 
    SQL = "SELECT count(distinct variant_record_primary_key) FROM NIAGADS.VariantGWASTopHits WHERE neg_log10_pvalue >= -1 * log(5e-8)"

    count = None
    with database.cursor() as cursor:
        cursor.execute(SQL)
        count = cursor.fetchone()[0]

    return count


def get_num_annotated_genes():
    ''' get number of annotated genes'''
 
    SQL = "SELECT count(distinct(annotation->'ADSP_MOST_SEVERE_CONSEQUENCE'->>'gene_id')) FROM NIAGADS.VariantGWASTopHits WHERE neg_log10_pvalue >= -1 * log(5e-8)"

    count = None
    with database.cursor() as cursor:
        cursor.execute(SQL)
        count = cursor.fetchone()[0]

    return count


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="retrieve site statistics from db")
    parser.add_argument('--outputFile', help="full path to output file", required=True)
    parser.add_argument('--gusConfigFile',
                        help="GUS config file.  If not provided, assumes default: $GUS_HOME/conf/gus.config")

    args = parser.parse_args()

    database = Database(args.gusConfigFile)
    database.connect()

    siteStats = {}
  
    try:
        siteStats['ANNOTATED_VARIANTS'] = get_num_annotated_variants()
        siteStats['DATASETS'] = get_num_ss_datasets()
        siteStats['SIGNIFICANT_VARIANTS'] = get_num_gws_variants()
        siteStats['ANNOTATED_GENES'] = get_num_annotated_genes()
    except Exception as e:
        print(e)
        print("Error extracting site statistics from database")
        
    database.close()


    with open(args.outputFile, 'w') as ofh:
           print("// WARNING: Do not edit this file directly.", file=ofh)
           print("// Then run `python $PROJECT_HOME/GenomicsDBWebsite/Model/bin/generateSiteStatisticsJson` to regenerate this file.", file=ofh)
           print("// DB creds must be specified in $GUS_HOME/config/gus.config` to regenerate this file", file=ofh)
           print("export const _siteStatistics = " + json.dumps(siteStats), file=ofh)


