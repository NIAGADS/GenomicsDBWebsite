#!/usr/bin/env python

""" 
queries against the db for dataset releases
"""

import argparse
import json
from os import path
from psycopg2.errors import lookup as elookup
from GenomicsDBData.Util.postgres_dbi import Database
from GenomicsDBData.Util.utils import xstr


def get_dataset_attributes():
    ''' get number dataset details '''

    SQL = """SELECT jsonb_agg(jsonb_build_object('title', d.name,
'description', truncate_str(d.description, 150), 
'attribution', d.attribution,
'date', sr.release_date,
'accession', d.accession,
'tracks', ta.tracks) order by sr.release_date DESC)
FROM NIAGADS.DatasetAttributes d, NIAGADS.StudyRelease sr,
(SELECT dataset_accession, jsonb_agg(track) AS tracks FROM NIAGADS.TrackAttributes GROUP BY dataset_accession) ta
WHERE d.accession = sr.accession
AND d.accession = ta.dataset_accession"""

    result = None
    with database.cursor() as cursor:
        cursor.execute(SQL)
        result = cursor.fetchone()[0]

    return result


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="retrieve site statistics from db")
    parser.add_argument(
        '--outputFile', help="full path to output file", required=True)
    parser.add_argument('--gusConfigFile',
                        help="GUS config file.  If not provided, assumes default: $GUS_HOME/conf/gus.config")

    args = parser.parse_args()

    database = Database(args.gusConfigFile)
    database.connect()

    data = {}
    try:
        data = get_dataset_attributes()

    except Exception as e:
        print(e)
        print("Error extracting dataset attributes from database")

    database.close()

    with open(args.outputFile, 'w') as ofh:
        print("// WARNING: Do not edit this file directly.", file=ofh)
        print("// Run `python $PROJECT_HOME/GenomicsDBWebsite/Model/bin/generateDataReleaseJson` to regenerate this file.", file=ofh)
        print("// DB creds must be specified in $GUS_HOME/config/gus.config` to regenerate this file", file=ofh)
        print("export const _currentRelease = '" + data[0]['date'] + "';", file=ofh)
        print("export const _datasetReleases = " + json.dumps(data), file=ofh)
